/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { PublicAnalyticsFilterDTO } from './publicAnalyticsFilterDTO';
import { PublicCommonAnalyticsLocalAreaPropertiesDTO } from './publicCommonAnalyticsLocalAreaPropertiesDTO';
import { PublicTemporalRangeFilterDTO } from './publicTemporalRangeFilterDTO';
import { PublicTrendAnalyticsDisplayPropertyOptions } from './publicTrendAnalyticsDisplayPropertyOptions';

/**
* The state of the trend analytics page
*/
export class PublicTrendAnalyticsPageState {
    /**
    * The id of the active data set
    */
    'activeDataSetId': string;
    /**
    * Determines what is shown on the trend diagrams
    */
    'mode': PublicTrendAnalyticsPageState.ModeEnum;
    /**
    * The chart type
    */
    'chartType'?: PublicTrendAnalyticsPageState.ChartTypeEnum;
    'displayPropertyOptions'?: PublicTrendAnalyticsDisplayPropertyOptions;
    'filter'?: PublicAnalyticsFilterDTO;
    /**
    * <p>The time zone of the global trend analytics.</p><p>When not specified, UTC is used as timezone.</p>
    */
    'globalTimeZoneIdentifier'?: string;
    /**
    * Defines the local areas for which trend analytics must be calculated
    */
    'localAreas'?: Array<PublicCommonAnalyticsLocalAreaPropertiesDTO>;
    /**
    * <p>Defines the time ranges.</p><ul><li>When not specified, a default time range will be used.</li><li>When a single time range is specified, the trend analytics will show trends for this range.</li><li>When specifying two ranges, the trend analytics will show a comparison between those two ranges.</li></ul>
    */
    'timeRanges'?: Array<PublicTemporalRangeFilterDTO>;
    /**
    * <p>Defines how the results are grouped when displaying them in the trend analytics.</p><p>When not specified, no grouping will be used</p>
    */
    'groupingMode'?: PublicTrendAnalyticsPageState.GroupingModeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "activeDataSetId",
            "baseName": "activeDataSetId",
            "type": "string"
        },
        {
            "name": "mode",
            "baseName": "mode",
            "type": "PublicTrendAnalyticsPageState.ModeEnum"
        },
        {
            "name": "chartType",
            "baseName": "chartType",
            "type": "PublicTrendAnalyticsPageState.ChartTypeEnum"
        },
        {
            "name": "displayPropertyOptions",
            "baseName": "displayPropertyOptions",
            "type": "PublicTrendAnalyticsDisplayPropertyOptions"
        },
        {
            "name": "filter",
            "baseName": "filter",
            "type": "PublicAnalyticsFilterDTO"
        },
        {
            "name": "globalTimeZoneIdentifier",
            "baseName": "globalTimeZoneIdentifier",
            "type": "string"
        },
        {
            "name": "localAreas",
            "baseName": "localAreas",
            "type": "Array<PublicCommonAnalyticsLocalAreaPropertiesDTO>"
        },
        {
            "name": "timeRanges",
            "baseName": "timeRanges",
            "type": "Array<PublicTemporalRangeFilterDTO>"
        },
        {
            "name": "groupingMode",
            "baseName": "groupingMode",
            "type": "PublicTrendAnalyticsPageState.GroupingModeEnum"
        }    ];

    static getAttributeTypeMap() {
        return PublicTrendAnalyticsPageState.attributeTypeMap;
    }
}

export namespace PublicTrendAnalyticsPageState {
    export enum ModeEnum {
        Property = <any> 'DISPLAY_PROPERTY',
        NumberOfAssets = <any> 'DISPLAY_NUMBER_OF_ASSETS'
    }
    export enum ChartTypeEnum {
        BarChart = <any> 'BAR_CHART',
        LineChart = <any> 'LINE_CHART'
    }
    export enum GroupingModeEnum {
        GroupByHour = <any> 'GROUP_BY_HOUR',
        GroupByDay = <any> 'GROUP_BY_DAY',
        NoGrouping = <any> 'NO_GROUPING'
    }
}
