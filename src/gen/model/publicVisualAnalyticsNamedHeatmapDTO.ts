/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';

/**
* <p>Use a heatmap as color map for a numerical property.</p><p>For numerical properties, the color map specifies the mapping from a numeric value to a color. You can only specify a single color map for a numerical property. If you specify multiple ones, it is undefined which of the specified color maps will be used.</p>
*/
export class PublicVisualAnalyticsNamedHeatmapDTO {
    /**
    * The name of the heatmap
    */
    'name': PublicVisualAnalyticsNamedHeatmapDTO.NameEnum;
    /**
    * <p>Defines the minimum or start value from where this heatmap is used to determine the color.</p><p>The color mapping defined in the heatmap will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>
    */
    'fromValue'?: number;
    /**
    * <p>Defines the maximum or end value from where this heatmap is used to determine the color.</p><p>The color mapping defined in the heatmap will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>
    */
    'toValue'?: number;
    /**
    * <p>Defines the color to use for values smaller than <code>fromValue</code>.</p>
    */
    'lowerValuesHexColor'?: string;
    /**
    * <p>Defines the color to use for values greater than <code>toValue</code>.</p>
    */
    'upperValuesHexColor'?: string;
    /**
    * <p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>
    */
    'noDataHexColor'?: string;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "name",
            "baseName": "name",
            "type": "PublicVisualAnalyticsNamedHeatmapDTO.NameEnum"
        },
        {
            "name": "fromValue",
            "baseName": "fromValue",
            "type": "number"
        },
        {
            "name": "toValue",
            "baseName": "toValue",
            "type": "number"
        },
        {
            "name": "lowerValuesHexColor",
            "baseName": "lowerValuesHexColor",
            "type": "string"
        },
        {
            "name": "upperValuesHexColor",
            "baseName": "upperValuesHexColor",
            "type": "string"
        },
        {
            "name": "noDataHexColor",
            "baseName": "noDataHexColor",
            "type": "string"
        }    ];

    static getAttributeTypeMap() {
        return PublicVisualAnalyticsNamedHeatmapDTO.attributeTypeMap;
    }
}

export namespace PublicVisualAnalyticsNamedHeatmapDTO {
    export enum NameEnum {
        Bone = <any> 'BONE',
        Cool = <any> 'COOL',
        Hot = <any> 'HOT',
        Jet = <any> 'JET',
        Jet2 = <any> 'JET2',
        Plasma = <any> 'PLASMA',
        Rainbow = <any> 'RAINBOW',
        Rainbow2 = <any> 'RAINBOW2',
        Spring = <any> 'SPRING',
        Viridis = <any> 'VIRIDIS'
    }
}
