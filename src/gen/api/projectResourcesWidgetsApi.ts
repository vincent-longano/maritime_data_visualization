/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { CreatePublicDistributionAnalyticsWidgetRequest } from '../model/createPublicDistributionAnalyticsWidgetRequest';
import { CreatePublicDocumentationWidgetRequest } from '../model/createPublicDocumentationWidgetRequest';
import { CreatePublicDwellTimeWidgetRequest } from '../model/createPublicDwellTimeWidgetRequest';
import { CreatePublicOriginDestinationWidgetRequest } from '../model/createPublicOriginDestinationWidgetRequest';
import { CreatePublicTrendAnalyticsWidgetRequest } from '../model/createPublicTrendAnalyticsWidgetRequest';
import { CreatePublicVisualAnalyticsWidgetRequest } from '../model/createPublicVisualAnalyticsWidgetRequest';
import { CreatePublicWidgetGroupRequest } from '../model/createPublicWidgetGroupRequest';
import { PublicWidgetDTO } from '../model/publicWidgetDTO';
import { PublicWidgetGroupDTO } from '../model/publicWidgetGroupDTO';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.platform-xyzt.ai';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ProjectResourcesWidgetsApiApiKeys {
}

export class ProjectResourcesWidgetsApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'jwtToken': new HttpBearerAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ProjectResourcesWidgetsApiApiKeys, value: string) {
        (this.authentications as any)[ProjectResourcesWidgetsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.jwtToken.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * <p>Creates a new distribution analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new distribution analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDistributionAnalyticsWidgetRequest Request body describing the distribution analytics widget under construction
     */
    public async createDistributionAnalyticsWidget (projectId: string, widgetGroupId: string, createPublicDistributionAnalyticsWidgetRequest: CreatePublicDistributionAnalyticsWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/distributionanalyticwidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createDistributionAnalyticsWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createDistributionAnalyticsWidget.');
        }

        // verify required parameter 'createPublicDistributionAnalyticsWidgetRequest' is not null or undefined
        if (createPublicDistributionAnalyticsWidgetRequest === null || createPublicDistributionAnalyticsWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicDistributionAnalyticsWidgetRequest was null or undefined when calling createDistributionAnalyticsWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicDistributionAnalyticsWidgetRequest, "CreatePublicDistributionAnalyticsWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new dwell time widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new dwell time widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDwellTimeWidgetRequest Request body describing the dwell time widget under construction
     */
    public async createDwellTimeWidget (projectId: string, widgetGroupId: string, createPublicDwellTimeWidgetRequest: CreatePublicDwellTimeWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/dwelltimewidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createDwellTimeWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createDwellTimeWidget.');
        }

        // verify required parameter 'createPublicDwellTimeWidgetRequest' is not null or undefined
        if (createPublicDwellTimeWidgetRequest === null || createPublicDwellTimeWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicDwellTimeWidgetRequest was null or undefined when calling createDwellTimeWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicDwellTimeWidgetRequest, "CreatePublicDwellTimeWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new documentation widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new documentation widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDocumentationWidgetRequest Request body describing the documentation widget under construction
     */
    public async createInformationWidget (projectId: string, widgetGroupId: string, createPublicDocumentationWidgetRequest: CreatePublicDocumentationWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/documentationwidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createInformationWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createInformationWidget.');
        }

        // verify required parameter 'createPublicDocumentationWidgetRequest' is not null or undefined
        if (createPublicDocumentationWidgetRequest === null || createPublicDocumentationWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicDocumentationWidgetRequest was null or undefined when calling createInformationWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicDocumentationWidgetRequest, "CreatePublicDocumentationWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new origin destination widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new origin destination widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicOriginDestinationWidgetRequest Request body describing the origin destination widget under construction
     */
    public async createOriginDestinationWidget (projectId: string, widgetGroupId: string, createPublicOriginDestinationWidgetRequest: CreatePublicOriginDestinationWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/origindestinationwidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createOriginDestinationWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createOriginDestinationWidget.');
        }

        // verify required parameter 'createPublicOriginDestinationWidgetRequest' is not null or undefined
        if (createPublicOriginDestinationWidgetRequest === null || createPublicOriginDestinationWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicOriginDestinationWidgetRequest was null or undefined when calling createOriginDestinationWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicOriginDestinationWidgetRequest, "CreatePublicOriginDestinationWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new trend analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new trend analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicTrendAnalyticsWidgetRequest Request body describing the trend analytics widget under construction
     */
    public async createTrendAnalyticsWidget (projectId: string, widgetGroupId: string, createPublicTrendAnalyticsWidgetRequest: CreatePublicTrendAnalyticsWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/trendanalyticwidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createTrendAnalyticsWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createTrendAnalyticsWidget.');
        }

        // verify required parameter 'createPublicTrendAnalyticsWidgetRequest' is not null or undefined
        if (createPublicTrendAnalyticsWidgetRequest === null || createPublicTrendAnalyticsWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicTrendAnalyticsWidgetRequest was null or undefined when calling createTrendAnalyticsWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicTrendAnalyticsWidgetRequest, "CreatePublicTrendAnalyticsWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new visual analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new visual analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicVisualAnalyticsWidgetRequest Request body describing the visual analytics widget under construction
     */
    public async createVisualAnalyticsWidget (projectId: string, widgetGroupId: string, createPublicVisualAnalyticsWidgetRequest: CreatePublicVisualAnalyticsWidgetRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/visualanalyticswidgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createVisualAnalyticsWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling createVisualAnalyticsWidget.');
        }

        // verify required parameter 'createPublicVisualAnalyticsWidgetRequest' is not null or undefined
        if (createPublicVisualAnalyticsWidgetRequest === null || createPublicVisualAnalyticsWidgetRequest === undefined) {
            throw new Error('Required parameter createPublicVisualAnalyticsWidgetRequest was null or undefined when calling createVisualAnalyticsWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicVisualAnalyticsWidgetRequest, "CreatePublicVisualAnalyticsWidgetRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Creates a new widget group for the project, and returns the created widget group.</p><p>Once you have a widget group, you can add widgets to it.</p>
     * @summary Create a new widget group for the project
     * @param projectId The id of the project to create the widget group for
     * @param createPublicWidgetGroupRequest Request body describing the widget group under construction
     */
    public async createWidgetGroup (projectId: string, createPublicWidgetGroupRequest: CreatePublicWidgetGroupRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicWidgetGroupDTO;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createWidgetGroup.');
        }

        // verify required parameter 'createPublicWidgetGroupRequest' is not null or undefined
        if (createPublicWidgetGroupRequest === null || createPublicWidgetGroupRequest === undefined) {
            throw new Error('Required parameter createPublicWidgetGroupRequest was null or undefined when calling createWidgetGroup.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(createPublicWidgetGroupRequest, "CreatePublicWidgetGroupRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicWidgetGroupDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicWidgetGroupDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Delete a widget from a widget group.</p>
     * @summary Delete a widget from a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group to delete
     * @param widgetId 
     */
    public async deleteWidget (projectId: string, widgetGroupId: string, widgetId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets/{widgetId}'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)))
            .replace('{' + 'widgetId' + '}', encodeURIComponent(String(widgetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteWidget.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling deleteWidget.');
        }

        // verify required parameter 'widgetId' is not null or undefined
        if (widgetId === null || widgetId === undefined) {
            throw new Error('Required parameter widgetId was null or undefined when calling deleteWidget.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Delete a widget group and all the widgets it contains.</p>
     * @summary Delete a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group to delete
     */
    public async deleteWidgetGroup (projectId: string, widgetGroupId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteWidgetGroup.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling deleteWidgetGroup.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns all the widget groups that are created for the project.</p><p>You need to have at least one widget group before you can add widgets to your dashboard.</p>
     * @summary Retrieve all the available widget groups for a project
     * @param projectId The id of the project
     */
    public async getWidgetGroups (projectId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<PublicWidgetGroupDTO>;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getWidgetGroups.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<PublicWidgetGroupDTO>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<PublicWidgetGroupDTO>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns all the widgets from a widget group.</p>
     * @summary Retrieve all the widgets in a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group
     */
    public async getWidgets (projectId: string, widgetGroupId: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Array<PublicWidgetDTO>;  }> {
        const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getWidgets.');
        }

        // verify required parameter 'widgetGroupId' is not null or undefined
        if (widgetGroupId === null || widgetGroupId === undefined) {
            throw new Error('Required parameter widgetGroupId was null or undefined when calling getWidgets.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: Array<PublicWidgetDTO>;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "Array<PublicWidgetDTO>");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
