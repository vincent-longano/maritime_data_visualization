/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { PublicDownloadAssetIdsDTO } from '../model/publicDownloadAssetIdsDTO';
import { PublicDownloadAssetIdsDataRequest } from '../model/publicDownloadAssetIdsDataRequest';
import { PublicDownloadDistributionDTO } from '../model/publicDownloadDistributionDTO';
import { PublicDownloadDistributionDataRequest } from '../model/publicDownloadDistributionDataRequest';
import { PublicDownloadDwellTimeDTO } from '../model/publicDownloadDwellTimeDTO';
import { PublicDownloadDwellTimeDataRequest } from '../model/publicDownloadDwellTimeDataRequest';
import { PublicDownloadOriginDestinationDTO } from '../model/publicDownloadOriginDestinationDTO';
import { PublicDownloadOriginDestinationDataRequest } from '../model/publicDownloadOriginDestinationDataRequest';
import { PublicDownloadTableDTO } from '../model/publicDownloadTableDTO';
import { PublicDownloadTableDataRequest } from '../model/publicDownloadTableDataRequest';
import { PublicDownloadTrendDTO } from '../model/publicDownloadTrendDTO';
import { PublicDownloadTrendDataRequest } from '../model/publicDownloadTrendDataRequest';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
import { HttpBasicAuth, HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://api.platform-xyzt.ai';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ProjectQueriesQueryAndDownloadDataApiApiKeys {
}

export class ProjectQueriesQueryAndDownloadDataApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'jwtToken': new HttpBearerAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ProjectQueriesQueryAndDownloadDataApiApiKeys, value: string) {
        (this.authentications as any)[ProjectQueriesQueryAndDownloadDataApiApiKeys[key]].apiKey = value;
    }

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.jwtToken.accessToken = accessToken;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * Returns the asset ids matching a filter
     * @summary Download the asset ids in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadAssetIdsDataRequest Request body describing the filters
     */
    public async downloadAssetIdsAsCSV (projectId: string, dataSetId: string, publicDownloadAssetIdsDataRequest: PublicDownloadAssetIdsDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/assetids'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadAssetIdsAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadAssetIdsAsCSV.');
        }

        // verify required parameter 'publicDownloadAssetIdsDataRequest' is not null or undefined
        if (publicDownloadAssetIdsDataRequest === null || publicDownloadAssetIdsDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadAssetIdsDataRequest was null or undefined when calling downloadAssetIdsAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadAssetIdsDataRequest, "PublicDownloadAssetIdsDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * Returns the asset ids matching a filter
     * @summary Download the asset ids in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadAssetIdsDataRequest Request body describing the filters
     */
    public async downloadAssetIdsAsJSON (projectId: string, dataSetId: string, publicDownloadAssetIdsDataRequest: PublicDownloadAssetIdsDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadAssetIdsDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/assetids'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadAssetIdsAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadAssetIdsAsJSON.');
        }

        // verify required parameter 'publicDownloadAssetIdsDataRequest' is not null or undefined
        if (publicDownloadAssetIdsDataRequest === null || publicDownloadAssetIdsDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadAssetIdsDataRequest was null or undefined when calling downloadAssetIdsAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadAssetIdsDataRequest, "PublicDownloadAssetIdsDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadAssetIdsDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadAssetIdsDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the distribution diagrams in CSV format.</p>
     * @summary Download the data which is shown in the distribution diagrams in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDistributionDataRequest Request body describing the filters and distribution properties
     */
    public async downloadDistributionAsCSV (projectId: string, dataSetId: string, publicDownloadDistributionDataRequest: PublicDownloadDistributionDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/distribution'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadDistributionAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadDistributionAsCSV.');
        }

        // verify required parameter 'publicDownloadDistributionDataRequest' is not null or undefined
        if (publicDownloadDistributionDataRequest === null || publicDownloadDistributionDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadDistributionDataRequest was null or undefined when calling downloadDistributionAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadDistributionDataRequest, "PublicDownloadDistributionDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the distribution diagrams in JSON format.</p>
     * @summary Download the data which is shown in the distribution diagrams in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDistributionDataRequest Request body describing the filters and distribution properties
     */
    public async downloadDistributionAsJSON (projectId: string, dataSetId: string, publicDownloadDistributionDataRequest: PublicDownloadDistributionDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadDistributionDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/distribution'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadDistributionAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadDistributionAsJSON.');
        }

        // verify required parameter 'publicDownloadDistributionDataRequest' is not null or undefined
        if (publicDownloadDistributionDataRequest === null || publicDownloadDistributionDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadDistributionDataRequest was null or undefined when calling downloadDistributionAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadDistributionDataRequest, "PublicDownloadDistributionDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadDistributionDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadDistributionDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the dwell time analysis in CSV format.</p>
     * @summary Download the data of the dwell time analysis in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDwellTimeDataRequest Request body describing the filters and dwell time analysis properties
     */
    public async downloadDwellTimeAnalysisAsCSV (projectId: string, dataSetId: string, publicDownloadDwellTimeDataRequest: PublicDownloadDwellTimeDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/dwelltimeanalysis'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
        }

        // verify required parameter 'publicDownloadDwellTimeDataRequest' is not null or undefined
        if (publicDownloadDwellTimeDataRequest === null || publicDownloadDwellTimeDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadDwellTimeDataRequest was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadDwellTimeDataRequest, "PublicDownloadDwellTimeDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the dwell time analysis in JSON format.</p>
     * @summary Download the data of the dwell time analysis in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDwellTimeDataRequest Request body describing the filters and dwell time analysis properties
     */
    public async downloadDwellTimeAnalysisAsJSON (projectId: string, dataSetId: string, publicDownloadDwellTimeDataRequest: PublicDownloadDwellTimeDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadDwellTimeDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/dwelltimeanalysis'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
        }

        // verify required parameter 'publicDownloadDwellTimeDataRequest' is not null or undefined
        if (publicDownloadDwellTimeDataRequest === null || publicDownloadDwellTimeDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadDwellTimeDataRequest was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadDwellTimeDataRequest, "PublicDownloadDwellTimeDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadDwellTimeDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadDwellTimeDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the origin destination matrix in CSV format.</p>
     * @summary Download the data which is shown in the origin destination matrix in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadOriginDestinationDataRequest Request body describing the filters and origin destination properties
     */
    public async downloadOriginDestinationAsCSV (projectId: string, dataSetId: string, publicDownloadOriginDestinationDataRequest: PublicDownloadOriginDestinationDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/origindestination'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadOriginDestinationAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadOriginDestinationAsCSV.');
        }

        // verify required parameter 'publicDownloadOriginDestinationDataRequest' is not null or undefined
        if (publicDownloadOriginDestinationDataRequest === null || publicDownloadOriginDestinationDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadOriginDestinationDataRequest was null or undefined when calling downloadOriginDestinationAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadOriginDestinationDataRequest, "PublicDownloadOriginDestinationDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the origin destination matrix in JSON format.</p>
     * @summary Download the data which is shown in the origin destination matrix in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadOriginDestinationDataRequest Request body describing the filters and origin destination properties
     */
    public async downloadOriginDestinationAsJSON (projectId: string, dataSetId: string, publicDownloadOriginDestinationDataRequest: PublicDownloadOriginDestinationDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadOriginDestinationDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/origindestination'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadOriginDestinationAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadOriginDestinationAsJSON.');
        }

        // verify required parameter 'publicDownloadOriginDestinationDataRequest' is not null or undefined
        if (publicDownloadOriginDestinationDataRequest === null || publicDownloadOriginDestinationDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadOriginDestinationDataRequest was null or undefined when calling downloadOriginDestinationAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadOriginDestinationDataRequest, "PublicDownloadOriginDestinationDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadOriginDestinationDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadOriginDestinationDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the table view shown on the visual analytics page in CSV format.</p><p>The returned CSV contains only the requested columns, and a row for each asset.</p>
     * @summary Get the data which is shown in the table on the visual analytics page in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTableDataRequest Request body describing the filters and table properties
     */
    public async downloadTableAsCSV (projectId: string, dataSetId: string, publicDownloadTableDataRequest: PublicDownloadTableDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/table'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadTableAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadTableAsCSV.');
        }

        // verify required parameter 'publicDownloadTableDataRequest' is not null or undefined
        if (publicDownloadTableDataRequest === null || publicDownloadTableDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadTableDataRequest was null or undefined when calling downloadTableAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadTableDataRequest, "PublicDownloadTableDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the table view shown on the visual analytics page in JSON format.</p>
     * @summary Get the data which is shown in the table on the visual analytics page in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTableDataRequest Request body describing the filters and table properties
     */
    public async downloadTableAsJSON (projectId: string, dataSetId: string, publicDownloadTableDataRequest: PublicDownloadTableDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadTableDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/table'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadTableAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadTableAsJSON.');
        }

        // verify required parameter 'publicDownloadTableDataRequest' is not null or undefined
        if (publicDownloadTableDataRequest === null || publicDownloadTableDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadTableDataRequest was null or undefined when calling downloadTableAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadTableDataRequest, "PublicDownloadTableDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadTableDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadTableDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the trend diagrams in CSV format.</p>
     * @summary Get the data which is shown in the trend diagrams (histograms or timelines) in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTrendDataRequest Request body describing the filters and trend properties
     */
    public async downloadTrendAsCSV (projectId: string, dataSetId: string, publicDownloadTrendDataRequest: PublicDownloadTrendDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: string;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/trend'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['text/csv'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadTrendAsCSV.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadTrendAsCSV.');
        }

        // verify required parameter 'publicDownloadTrendDataRequest' is not null or undefined
        if (publicDownloadTrendDataRequest === null || publicDownloadTrendDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadTrendDataRequest was null or undefined when calling downloadTrendAsCSV.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadTrendDataRequest, "PublicDownloadTrendDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: string;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "string");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * <p>Returns the data from the trend diagrams in JSON format.</p>
     * @summary Get the data which is shown in the trend diagrams (histograms or timelines) in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTrendDataRequest Request body describing the filters and trend properties
     */
    public async downloadTrendAsJSON (projectId: string, dataSetId: string, publicDownloadTrendDataRequest: PublicDownloadTrendDataRequest, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: PublicDownloadTrendDTO;  }> {
        const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/trend'
            .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
            .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        const produces = ['application/json'];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            localVarHeaderParams.Accept = 'application/json';
        } else {
            localVarHeaderParams.Accept = produces.join(',');
        }
        let localVarFormParams: any = {};

        // verify required parameter 'projectId' is not null or undefined
        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling downloadTrendAsJSON.');
        }

        // verify required parameter 'dataSetId' is not null or undefined
        if (dataSetId === null || dataSetId === undefined) {
            throw new Error('Required parameter dataSetId was null or undefined when calling downloadTrendAsJSON.');
        }

        // verify required parameter 'publicDownloadTrendDataRequest' is not null or undefined
        if (publicDownloadTrendDataRequest === null || publicDownloadTrendDataRequest === undefined) {
            throw new Error('Required parameter publicDownloadTrendDataRequest was null or undefined when calling downloadTrendAsJSON.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(publicDownloadTrendDataRequest, "PublicDownloadTrendDataRequest")
        };

        let authenticationPromise = Promise.resolve();
        if (this.authentications.jwtToken.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
        }
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body: PublicDownloadTrendDTO;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            body = ObjectSerializer.deserialize(body, "PublicDownloadTrendDTO");
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
