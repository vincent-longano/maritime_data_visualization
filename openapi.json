{
  "openapi": "3.0.1",
  "info": {
    "title": "xyzt.ai platform API",
    "description": "<p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>",
    "contact": {
      "name": "xyzt.ai",
      "url": "https://www.xyzt.ai",
      "email": "support@xyzt.ai"
    },
    "license": {
      "name": "xyzt.ai commercial license"
    },
    "version": "1.0",
    "x-logo": {
      "url": "/images/logos/xyzt.ai-logo-apidocs.png"
    }
  },
  "servers": [
    {
      "url": "https://api.platform-xyzt.ai"
    }
  ],
  "tags": [
    {
      "name": "Project resources: widgets",
      "description": "<p>A widget is a small version of a UI element which can be placed on the dashboard of a project.</p><p>On the dashboard, widgets are grouped together in a widget group.</p>"
    },
    {
      "name": "Project resources: filter information",
      "description": "<p>Each of the analytics pages allow you to filter on data properties, areas and time.</p><p>In order to create such filters through the API, you need to know for example what the available areas are.These methods allow to gather that information.</p>"
    },
    {
      "name": "Data Sets",
      "description": "<p><b>Data sets with time-dependent data</b></p><p>A data set is a collection of location records. You can add records by uploading CSV files where each row is a record with a location, timestamp and properties.</p><p>There are 2 different ways to provide the location information.</p><ul><li>The coordinates are contained in the CSV data files (movement data).</li><li>The CSV data files only contain a shape identifier for the location, and the actual shapes are defined in a separate GeoJSON file (time series data).</li></ul><p>An asset in a dataset can have properties that remain constant over time, and that aren't duplicated in each location record. For example for a ship this could be the name of the ship and the length. These properties are called metadata and can be uploaded separately.</p><p>Metadata CSV files are only supported for movement data.When working with time series data, any metadata about those locations should be put in the GeoJSON file as well.</p><p>By default all uploaded data is added to the data set and cannot be deleted afterwards.Only the whole data set can be deleted.</p><p>If you want to delete part of the data set, you need to use batches.When uploading new records, you can indicate to which batch they belong.Each of the batches can be deleted individually.</p><p>A use-case for using batches is uploading new records daily, but only wanting to retain the data of the last week.This can be done by creating a new batch every day, and deleting the batches you no longer need.</p><p><b>Data sets without time-dependent data</b></p><p>The platform also supports to upload GeoJSON files as data sets.The GeoJSON file contains a spatial location (point, polyline, polygon) and some properties for each of those locations.</p><p>By uploading the GeoJSON file as data set (and not as background layer or area of interest), you can style and filter the GeoJSON data.</p>"
    },
    {
      "name": "Authentication (JWT token)",
      "description": "<p>A JWT token is required to use the public API, which can be acquired here.Tokens are only valid for a few minutes at a time, so when using long-running scripts you will want to request a new token at regular intervals.</p><p>The token should be added to the <code>Authorization</code> header of all requests prefixed with <code>Bearer </code>.</p><p>For example if the JWT token is <code>12345</code>, the <code>Authorization</code> header would become:</p><pre>Bearer 12345</pre>"
    },
    {
      "name": "Projects",
      "description": "<p>A project combines data sets, areas of interest and background layers and makes them available to the analysis tools.</p>"
    },
    {
      "name": "Project resources: mapdata",
      "description": "<p>Mapdata (background or area of interest layers) can be attached to one or more projects.</p>"
    },
    {
      "name": "Project queries: query and download data",
      "description": "<p>Query your project for data, and download it as CSV or JSON.</p>"
    },
    {
      "name": "Project resources: links",
      "description": "<p>Pages of the project can be shared with people outside the platform by creating a link.</p><p>Links can only be created for a bookmark. People accessing the link will be taken to a page where the state matches the state stored in the bookmark.</p><p><strong>Warning:</strong> as long as the bookmark and link exist, anybody who knows the link has access to that project page and can view the data.</p>"
    },
    {
      "name": "Project resources: data sets",
      "description": "<p>Data sets can be attached to one or more projects.</p>"
    },
    {
      "name": "Background layers and areas of interest (=mapdata)",
      "description": "<p>Besides the data set you want to analyze you can also add background and/or area of interest layers to your project.In this REST API, we use the term <i>mapdata</i> to refer to either a background layer or an area of interest.</p><p><b>Background layers</b> are non-interactive layers that are rendered on the map in the Visual Analytics view.Typical examples are satellite imagery when analyzing outdoor data and floor plans when working with indoor date.</p><p><b>Areas of interest</b> are locations or areas that are of interest for analysis.For example, they could be the locations of retail stores, anchorage areas near ports, or road crossings.The areas of interest can be used to create filters and dashboards that focus the analytics on the respective region.</p>"
    },
    {
      "name": "Project resources: bookmarks",
      "description": "<p>Bookmarks allow you to store the state of your project so you can access it in the future.</p><p>You can only create/edit/delete bookmarks for your own projects.</p>"
    }
  ],
  "paths": {
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/trend": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Get the data which is shown in the trend diagrams (histograms or timelines) in JSON format",
        "description": "<p>Returns the data from the trend diagrams in JSON format.</p>",
        "operationId": "downloadTrendAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and trend properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadTrendDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadTrendDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/table": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Get the data which is shown in the table on the visual analytics page in JSON format",
        "description": "<p>Returns the data from the table view shown on the visual analytics page in JSON format.</p>",
        "operationId": "downloadTableAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and table properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadTableDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadTableDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/origindestination": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data which is shown in the origin destination matrix in JSON format",
        "description": "<p>Returns the data from the origin destination matrix in JSON format.</p>",
        "operationId": "downloadOriginDestinationAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and origin destination properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadOriginDestinationDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadOriginDestinationDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/dwelltimeanalysis": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data of the dwell time analysis in JSON format",
        "description": "<p>Returns the data from the dwell time analysis in JSON format.</p>",
        "operationId": "downloadDwellTimeAnalysisAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and dwell time analysis properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadDwellTimeDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadDwellTimeDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/distribution": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data which is shown in the distribution diagrams in JSON format",
        "description": "<p>Returns the data from the distribution diagrams in JSON format.</p>",
        "operationId": "downloadDistributionAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and distribution properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadDistributionDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadDistributionDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/assetids": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the asset ids in JSON format",
        "description": "Returns the asset ids matching a filter",
        "operationId": "downloadAssetIdsAsJSON",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadAssetIdsDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDownloadAssetIdsDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/trend": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Get the data which is shown in the trend diagrams (histograms or timelines) in CSV format",
        "description": "<p>Returns the data from the trend diagrams in CSV format.</p>",
        "operationId": "downloadTrendAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and trend properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadTrendDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/table": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Get the data which is shown in the table on the visual analytics page in CSV format",
        "description": "<p>Returns the data from the table view shown on the visual analytics page in CSV format.</p><p>The returned CSV contains only the requested columns, and a row for each asset.</p>",
        "operationId": "downloadTableAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and table properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadTableDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/origindestination": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data which is shown in the origin destination matrix in CSV format",
        "description": "<p>Returns the data from the origin destination matrix in CSV format.</p>",
        "operationId": "downloadOriginDestinationAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and origin destination properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadOriginDestinationDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/dwelltimeanalysis": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data of the dwell time analysis in CSV format",
        "description": "<p>Returns the data from the dwell time analysis in CSV format.</p>",
        "operationId": "downloadDwellTimeAnalysisAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and dwell time analysis properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadDwellTimeDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/distribution": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the data which is shown in the distribution diagrams in CSV format",
        "description": "<p>Returns the data from the distribution diagrams in CSV format.</p>",
        "operationId": "downloadDistributionAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters and distribution properties",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadDistributionDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/assetids": {
      "post": {
        "tags": [
          "Project queries: query and download data"
        ],
        "summary": "Download the asset ids in CSV format",
        "description": "Returns the asset ids matching a filter",
        "operationId": "downloadAssetIdsAsCSV",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the dataSet",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the filters",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicDownloadAssetIdsDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/tokens": {
      "post": {
        "tags": [
          "Authentication (JWT token)"
        ],
        "summary": "Retrieve a JWT token",
        "description": "Retrieve a JWT token based on the username and password of the API user. ",
        "operationId": "obtainToken",
        "requestBody": {
          "description": "Request body containing the credentials",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JWTTokenDTO"
                }
              }
            }
          }
        }
      }
    },
    "/public/api/projects/{projectId}/mapdata": {
      "get": {
        "tags": [
          "Project resources: mapdata"
        ],
        "summary": "Retrieve all mapdata used in a project",
        "description": "Returns a list with all your mapdata that are used in one of your projects.",
        "operationId": "getAllProjectMapData",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicMapDataDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project resources: mapdata"
        ],
        "summary": "Attach a mapdata to a project",
        "description": "Attaches the mapdata to the project. If you want to use a mapdata in multiple projects, you have to call this method multiple times.",
        "operationId": "addMapDataToProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body specifying which mapdata you want to attach to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicAddMapDataToProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets": {
      "get": {
        "tags": [
          "Project resources: data sets"
        ],
        "summary": "Retrieve all datasets used in a project",
        "description": "Returns a list with all your datasets that are used in one of your projects.",
        "operationId": "getAllProjectDataSets",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicDataSetDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project resources: data sets"
        ],
        "summary": "Attach a data set to a project",
        "description": "Attaches the data set to the project. If you want to use a data set in multiple projects, you have to call this method multiple times.",
        "operationId": "addDataSetToProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body specifying which data set you want to attach to the project",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicAddDataSetToProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/visualanalyticswidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new visual analytics widget",
        "description": "<p>Creates a new visual analytics widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createVisualAnalyticsWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the visual analytics widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicVisualAnalyticsWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/trendanalyticwidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new trend analytics widget",
        "description": "<p>Creates a new trend analytics widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createTrendAnalyticsWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the trend analytics widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicTrendAnalyticsWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/origindestinationwidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new origin destination widget",
        "description": "<p>Creates a new origin destination widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createOriginDestinationWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the origin destination widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicOriginDestinationWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/dwelltimewidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new dwell time widget",
        "description": "<p>Creates a new dwell time widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createDwellTimeWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the dwell time widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicDwellTimeWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/documentationwidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new documentation widget",
        "description": "<p>Creates a new documentation widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createInformationWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the documentation widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicDocumentationWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/distributionanalyticwidgets": {
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new distribution analytics widget",
        "description": "<p>Creates a new distribution analytics widget.</p><p>The created widget resource is returned.</p>",
        "operationId": "createDistributionAnalyticsWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget for",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to which the widget belongs",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the distribution analytics widget under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicDistributionAnalyticsWidgetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups": {
      "get": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Retrieve all the available widget groups for a project",
        "description": "<p>Returns all the widget groups that are created for the project.</p><p>You need to have at least one widget group before you can add widgets to your dashboard.</p>",
        "operationId": "getWidgetGroups",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicWidgetGroupDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Create a new widget group for the project",
        "description": "<p>Creates a new widget group for the project, and returns the created widget group.</p><p>Once you have a widget group, you can add widgets to it.</p>",
        "operationId": "createWidgetGroup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the widget group for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the widget group under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicWidgetGroupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicWidgetGroupDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/bookmarks/{bookmarkId}/links": {
      "get": {
        "tags": [
          "Project resources: links"
        ],
        "summary": "Retrieve all available links for the bookmark",
        "description": "<p>Returns all the links that are created for the bookmark.</p>",
        "operationId": "getBookmarkLinks",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "The id of the bookmark",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicBookmarkLinkDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project resources: links"
        ],
        "summary": "Create a new link for the bookmark",
        "description": "<p>Creates a new link for the bookmark, and returns the created link.</p><p><strong>Warning:</strong> as long as the bookmark and link exist, anybody who knows the link has access to that project page and can view the data.</p>",
        "operationId": "createLink",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "The id of the bookmark to create the link for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the link under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicBookmarkLinkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicBookmarkLinkDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/bookmarks": {
      "get": {
        "tags": [
          "Project resources: bookmarks"
        ],
        "summary": "Retrieve all available bookmarks for a project",
        "description": "<p>Returns all the bookmarks that are created for the project.</p>",
        "operationId": "getBookmarks",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicBookmarkDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Project resources: bookmarks"
        ],
        "summary": "Create a new bookmark for the project",
        "description": "<p>Creates a new bookmark for the project, and returns the created bookmark.</p><p>Once you have a bookmark, you can create links for it.</p>",
        "operationId": "createBookmark",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project to create the bookmark for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Request body describing the bookmark under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicBookmarkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicBookmarkDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Retrieve all the available projects",
        "description": "Returns a list with all your available projects.",
        "operationId": "getAllProjects",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicProjectDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create a project",
        "description": "<p>Creates a new project.</p><p>The created project resource is returned.</p>",
        "operationId": "createProject",
        "requestBody": {
          "description": "Request body describing the project under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata/wms": {
      "post": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Create a new WMS background layer",
        "description": "<p>Creates a new WMS background layer.</p><p>The created mapdata resource is returned.</p>",
        "operationId": "createWMSBackgroundLayer",
        "requestBody": {
          "description": "Request body describing the WMS background layer under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicWMSMapDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicMapDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata/mapbox": {
      "post": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Create a new Mapbox background layer",
        "description": "<p>Creates a new Mapbox background layer.</p><p>The created mapdata resource is returned.</p>",
        "operationId": "createMapboxBackgroundLayer",
        "requestBody": {
          "description": "Request body describing the Mapbox background layer under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicMapboxMapDataRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicMapDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata/geojson/{mapDataId}/images": {
      "post": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Upload images for a GeoJSON layer",
        "description": "<p>Upload the images that are used in the style definition of a GeoJSON layer.</p><p>You can upload the images one by one, or upload a zip file containing all the images.</p>",
        "operationId": "uploadGeoJSONImages",
        "parameters": [
          {
            "name": "mapDataId",
            "in": "path",
            "description": "The id of the mapdata",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicMapDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata/geojson": {
      "post": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Create a new GeoJSON layer",
        "description": "<p>Creates a new GeoJSON layer. This can either be a background layer or an area of interest layer.</p><p>The created mapdata resource is returned.</p>",
        "operationId": "createGeoJSONLayer",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file",
                  "json"
                ],
                "type": "object",
                "properties": {
                  "json": {
                    "$ref": "#/components/schemas/CreatePublicGeoJSONMapDataRequest"
                  },
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicMapDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/metadata/upload": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Upload a CSV file with new metadata for a movement data set.",
        "description": "<p>Upload a file with new metadata to the specified data set.This method can only be called for movement data sets.</p><p>The file can either be a CSV file (.csv) or a GZipped CSV file (.csv.gz).</p>",
        "operationId": "uploadMetadata",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch",
            "in": "query",
            "description": "<p>When present, the metadata will be added to the specified batch. When the batch doesn't exist yet, it will be created.</p><p>Note that when requesting the data sets, the batches are only listed in the data set if the batch contains some processed data. As such, it can take some time after uploading (meta) data to a new batch before the batch gets listed.</p>",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/metadata/structure": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Define the structure of your metadata for a movement data set.",
        "description": "<p>Define the structure of your metadata by uploading a CSV file (.csv) defining the available columns in your metadata.This method can be called only for movement data sets.</p><p>You must have defined the structure before you can upload any metadata.</p><p>Once you've uploaded any metadata, it is no longer possible to change the structure.</p>",
        "operationId": "uploadMovementMetadataDefinitionFile",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/geojson/upload": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Upload a GeoJSON shape file for a time series or static GeoJSON data set.",
        "description": "<p>Upload a file with new shapes to the specified data set. Note that shapes should have distinct identifiers, also if uploading multiple GeoJSON shape files.</p><p>The file can either be a GeoJSON file (.geojson) or a GZipped GeoJSON file (.geojson.gz).</p>",
        "operationId": "uploadGeoJSONShapeFile",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/geojson/structure": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Define the structure of your GeoJSON files for a time series data set or static GeoJSON data set.",
        "description": "<p>Define the structure of your GeoJSON files by uploading a CSV file (.csv) defining the available properties in your GeoJSON files.This method can be called only for time series and static GeoJSON data sets.</p><p>You must have defined the structure before you can upload any GeoJSON files.</p><p>Once you've uploaded any GeoJSON files, it is no longer possible to change the structure.</p>",
        "operationId": "uploadTimeSeriesMetadataDefinitionFile",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/data/upload": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Upload a CSV file with new records for a movement or time series data set.",
        "description": "<p>Upload a file with new records to the specified data set.</p><p>The file can either be a CSV file (.csv) or a GZipped CSV file (.csv.gz).</p>",
        "operationId": "uploadData",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batch",
            "in": "query",
            "description": "When present, the records will be added to the specified batch.When the batch doesn't exist yet, it will be created.</p><p>Note that when requesting the data sets, the batches are only listed in the data set if the batch contains some processed data. As such, it can take some time after uploading (meta) data to a new batch before the batch gets listed.</p>",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/data/structure": {
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Define the structure of your data.",
        "description": "<p>Define the structure of your data by uploading a CSV file (.csv) defining the available columns in your data.This method can be called for both movement and time series data sets.</p><p>You must have defined the structure before you can upload any data.</p><p>Once you've uploaded any data, it is no longer possible to change the structure.</p>",
        "operationId": "uploadDataDefinitionFile",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets": {
      "get": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Retrieve all the available data sets",
        "description": "Returns a list with all your available data sets.",
        "operationId": "getAllDataSets",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicDataSetDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      },
      "post": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Create a data set",
        "description": "<p>Creates a new data set.</p><p>The created data set resource is returned.</p><p>After you've created the data set, you first have to define the (meta)data fields before you can start uploading data.</p>",
        "operationId": "createDataSet",
        "requestBody": {
          "description": "Request body describing the data set under construction",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePublicDataSetRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDataSetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/timezones": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Retrieve all available timezones",
        "description": "<p>Some places in the API require to provide timezone information as a string.</p><p>The supported timezone strings can be retrieved using this method.</p>",
        "operationId": "getAvailableTimeZoneIdentifiers",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/visualanalytics/timelineproperties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Visual analytics: retrieve all timeline properties",
        "description": "<p>This method returns all the properties and their aggregation modes that can be shown on the timeline of the visual analytics page.</p>",
        "operationId": "getVisualAnalyticsTimeLineProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicVisualAnalyticsTimeLinePropertyDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/visualanalytics/tableviewcolumns": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Visual analytics: retrieve all table view columns",
        "description": "<p>This method returns all the available columns that can be used in the table view of the visual analytics page.</p>",
        "operationId": "getVisualAnalyticsTableViewColumns",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visualizationmode",
            "in": "query",
            "description": "<p>The available columns for the table view depend on the mode used to visualize the data set.</p><p>When not specified, this method will return the available columns for the <code>GRIDDED</code> mode.</p>",
            "required": false,
            "schema": {
              "type": "string",
              "default": "GRIDDED",
              "enum": [
                "GRIDDED",
                "TRAJECTORIES",
                "REALTIME"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicVisualAnalyticsTableViewColumnDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/visualanalytics/spatialmapproperties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Visual analytics: retrieve all spatial map properties",
        "description": "<p>This method returns all the properties and their aggregation modes that can be shown on the spatial map of the visual analytics page.</p>",
        "operationId": "getVisualAnalyticsSpatialMapProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicVisualAnalyticsSpatialMapPropertyDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/visualanalytics/distributionproperties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Visual analytics: retrieve all distribution properties",
        "description": "<p>This method returns all the properties that can be shown on the distribution panel of the visual analytics page.</p>",
        "operationId": "getVisualAnalyticsDistributionProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicVisualAnalyticsDistributionPropertyDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/trendanalytics/histogramproperties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Trend analytics: retrieve all histogram properties",
        "description": "<p>This method returns all the properties and their aggregation modes that can be shown on the histograms of the trend analytics page.</p>",
        "operationId": "getTrendAnalyticsHistogramProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicTrendAnalyticsHistogramPropertyDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/filtering/properties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Retrieve all properties for filtering",
        "description": "<p>The properties that can be used in a filter depend on both the project and the data set that is active.</p><p>This method returns all the available properties for such a combination.</p><p>When you want to use any of the returned properties in a filter, you need to refer to such a property using the id of the property.</p>",
        "operationId": "getProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicPropertyIdentifierDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/filtering/areas": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Retrieve all areas for filtering",
        "description": "<p>The areas that can be used in a filter depend on both the project and the data set that is active.</p><p>This method returns all the available areas for such a combination.</p><p>When you want to use any of the returned areas in a filter, you need to refer to such an area using the id of the area.</p>",
        "operationId": "getAreas",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicAreaIdentifierDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}/distributionanalytics/distributionproperties": {
      "get": {
        "tags": [
          "Project resources: filter information"
        ],
        "summary": "Distribution analytics: retrieve all distribution properties",
        "description": "<p>This method returns all the properties that can be shown on the distributions of the distribution analytics page.</p>",
        "operationId": "getDistributionAnalyticsDistributionProperties",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicDistributionAnalyticsDistributionPropertyDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets": {
      "get": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Retrieve all the widgets in a widget group",
        "description": "<p>Returns all the widgets from a widget group.</p>",
        "operationId": "getWidgets",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicWidgetDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata": {
      "get": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Retrieve all the available background layers and areas of interest",
        "description": "Returns a list with all your available background layers and areas of interest.",
        "operationId": "getAllMapDatas",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicMapDataDTO"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/mapdata/{mapDataId}": {
      "delete": {
        "tags": [
          "Project resources: mapdata"
        ],
        "summary": "Detach a mapdata from a project",
        "description": "<p>Detaches/removes a mapdata from a project.</p><p>This will not delete the mapdata, nor the project. It will simply remove the mpadata from the project.</p>",
        "operationId": "removeMapDataFromProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mapDataId",
            "in": "path",
            "description": "The id of the mapdata to detach from the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/datasets/{dataSetId}": {
      "delete": {
        "tags": [
          "Project resources: data sets"
        ],
        "summary": "Detach a data set from a project",
        "description": "<p>Detaches/removes a data set from a project.</p><p>This will not delete the data set, nor the project. It will simply remove the data set from the project.</p>",
        "operationId": "removeDataSetFromProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set to detach from the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}": {
      "delete": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Delete a widget group",
        "description": "<p>Delete a widget group and all the widgets it contains.</p>",
        "operationId": "deleteWidgetGroup",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets/{widgetId}": {
      "delete": {
        "tags": [
          "Project resources: widgets"
        ],
        "summary": "Delete a widget from a widget group",
        "description": "<p>Delete a widget from a widget group.</p>",
        "operationId": "deleteWidget",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetGroupId",
            "in": "path",
            "description": "The id of the widget group to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "widgetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/bookmarks/{bookmarkId}": {
      "delete": {
        "tags": [
          "Project resources: bookmarks"
        ],
        "summary": "Delete a bookmark",
        "description": "<p>Delete a bookmark, and all the links that were created for this bookmark.</p>",
        "operationId": "deleteBookmark",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "The id of the bookmark to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}/bookmarks/{bookmarkId}/links/{linkId}": {
      "delete": {
        "tags": [
          "Project resources: links"
        ],
        "summary": "Delete a link",
        "description": "<p>Delete a link. Anybody trying to access the link afterwards will get an error.</p>",
        "operationId": "deleteLink",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bookmarkId",
            "in": "path",
            "description": "The id of the bookmark to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "linkId",
            "in": "path",
            "description": "The id of the link to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/projects/{projectId}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete a project",
        "description": "<p>Deletes the project, and returns the deleted project.</p><p>All project specific resources like bookmarks, dashboards and shared links will also be removed.</p><p>The data used in the project (data sets, areas of interests and background layers) will not be deleted.</p>",
        "operationId": "deleteProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "The id of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicProjectDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/mapdata/{mapDataId}": {
      "delete": {
        "tags": [
          "Background layers and areas of interest (=mapdata)"
        ],
        "summary": "Delete a mapdata",
        "description": "<p>Deletes the mapdata, and returns the deleted mapdata.</p><p>Note that the map data will always be deleted, even when it is still in use by projects.</p>",
        "operationId": "deleteMapData",
        "parameters": [
          {
            "name": "mapDataId",
            "in": "path",
            "description": "The id of the mapdata",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicMapDataDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}/batches/{batchName}": {
      "delete": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Schedule the deletion of a batch of a data set",
        "description": "<p>Schedules the deletion of a batch of a data set, and all data associated with that batch.It can take some time before the batch is actually deleted.Until the batch is deleted, it will still show up in the data set.</p><p>This operation cannot be undone.Even when the deletion isn't executed yet but only scheduled, it cannot be stopped.</p>",
        "operationId": "deleteBatch",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "batchName",
            "in": "path",
            "description": "The id of the batch",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    },
    "/public/api/datasets/{dataSetId}": {
      "delete": {
        "tags": [
          "Data Sets"
        ],
        "summary": "Delete a data set",
        "description": "<p>Deletes the data set, and returns the deleted data set.</p><p>Note that the data set will always be deleted, even when it is still in use by projects.</p>",
        "operationId": "deleteDataSet",
        "parameters": [
          {
            "name": "dataSetId",
            "in": "path",
            "description": "The id of the data set",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicDataSetDTO"
                }
              }
            }
          }
        },
        "security": [
          {
            "jwtToken": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "PublicAnalyticsFilterDTO": {
        "type": "object",
        "properties": {
          "numericPropertyFilters": {
            "type": "array",
            "description": "<p>The list of filters for numerical properties.</p><p>The valid identifiers used in these filters depend on the page for which you define this filter (e.g. the visual analytics page, the origin destination page, ... ). The <a href=\"#tag/Project-resources:-filter-information\">Project resources: filter information</a> describes how you can obtain a list of valid identifiers.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicNumericPropertyFilterDTO"
            }
          },
          "stringEnumPropertyFilters": {
            "type": "array",
            "description": "<p>The list of filters for string/enum properties.</p><p>The valid identifiers used in these filters depend on the page for which you define this filter (e.g. the visual analytics page, the origin destination page, ... ). The <a href=\"#tag/Project-resources:-filter-information\">Project resources: filter information</a> describes how you can obtain a list of valid identifiers.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicStringEnumPropertyFilterDTO"
            }
          },
          "areaFilters": {
            "type": "array",
            "description": "<p>The list of filters for areas.</p><p>The valid identifiers used in these filters depend on the page for which you define this filter (e.g. the visual analytics page, the origin destination page, ... ). The <a href=\"#tag/Project-resources:-filter-information\">Project resources: filter information</a> describes how you can obtain a list of valid identifiers.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicAreaFilterDTO"
            }
          },
          "temporalFilter": {
            "$ref": "#/components/schemas/PublicTemporalFilterDTO"
          }
        },
        "description": "<p>The time/area/property filter for the analytics pages.</p><p>Note that not all analytics pages support all the filters. Unsupported filters will be ignored.</p>"
      },
      "PublicAreaFilterDTO": {
        "required": [
          "areaIdentifier",
          "filteringMode",
          "included"
        ],
        "type": "object",
        "properties": {
          "areaIdentifier": {
            "type": "string",
            "description": "The identifier of the area to use in the filter"
          },
          "filteringMode": {
            "type": "string",
            "description": "<p>Defines the mode of the area filter.</p><p>The supported modes depend on the type of data set that is being used. The prefix in the mode name specifies the supported data set type. The behavior is undefined when using an unsupported mode.</p>",
            "enum": [
              "MOVEMENT_DATASET_INSIDE",
              "MOVEMENT_DATASET_OUTSIDE",
              "MOVEMENT_DATASET_FROM",
              "MOVEMENT_DATASET_TO",
              "MOVEMENT_DATASET_THROUGH",
              "TIME_SERIES_DATASET_OVERLAPS",
              "TIME_SERIES_DATASET_OUTSIDE"
            ]
          },
          "included": {
            "type": "boolean",
            "description": "true to include records that match the area filter, false to exclude those records"
          }
        },
        "description": "Spatial filter on an area"
      },
      "PublicDownloadDataFilter": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "temporalRangeFilter": {
            "$ref": "#/components/schemas/PublicTemporalSingleRangeFilterDTO"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>Defines the timezone in which the hours of day / days of the week / months of the year filters are interpreted in.</p><p>For example if you specify to only include data on a Monday, the platform will interpret this as a Monday in the specified timezone.</p><p>When not specified, UTC is used as timezone.</p>"
          },
          "spatialMapBounds": {
            "$ref": "#/components/schemas/PublicSpatialBounds"
          }
        },
        "description": "The filter specifying which data to include"
      },
      "PublicDownloadTrendDataProperties": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Determines what is shown on the trend diagrams",
            "enum": [
              "DISPLAY_PROPERTY",
              "DISPLAY_NUMBER_OF_ASSETS"
            ]
          },
          "displayPropertyOptions": {
            "$ref": "#/components/schemas/PublicTrendAnalyticsDisplayPropertyOptions"
          },
          "groupingMode": {
            "type": "string",
            "description": "<p>Defines how the results are grouped.</p><p>When not specified, no grouping will be used</p>",
            "enum": [
              "GROUP_BY_HOUR",
              "GROUP_BY_DAY",
              "NO_GROUPING"
            ]
          }
        },
        "description": "Specifies the properties specific to the trend"
      },
      "PublicDownloadTrendDataRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDownloadTrendDataProperties"
          }
        }
      },
      "PublicNumericPropertyFilterDTO": {
        "required": [
          "included",
          "maximumValue",
          "minimumValue",
          "propertyIdentifier"
        ],
        "type": "object",
        "properties": {
          "propertyIdentifier": {
            "type": "string",
            "description": "The identifier of the property to filter on"
          },
          "minimumValue": {
            "type": "number",
            "description": "The minimum value (inclusive) of the range to be used by the filter",
            "format": "double"
          },
          "maximumValue": {
            "type": "number",
            "description": "The maximum value (inclusive) of the range to be used by the filter",
            "format": "double"
          },
          "included": {
            "type": "boolean",
            "description": "true to include the values in the range of this filter, false to exclude those values"
          }
        },
        "description": "A filter for a numerical property"
      },
      "PublicSpatialBounds": {
        "required": [
          "height",
          "latitude",
          "longitude",
          "width"
        ],
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "description": "The longitude coordinate of the lower left corner of the bounds in the WGS-84 coordinate reference system",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude coordinate of the lower left corner of the bounds in the WGS-84 coordinate reference system",
            "format": "double"
          },
          "width": {
            "maximum": 360,
            "minimum": 0,
            "type": "number",
            "description": "The width of the bounds, expressed in degrees",
            "format": "double"
          },
          "height": {
            "maximum": 180,
            "minimum": 0,
            "type": "number",
            "description": "The height of the bounds, expressed in degrees",
            "format": "double"
          }
        },
        "description": "<p>The spatial bounds of the map. Only data inside this bounds will be considered.</p><p>When not specified, world bounds will be used.</p>"
      },
      "PublicStringEnumPropertyFilterDTO": {
        "required": [
          "included",
          "propertyIdentifier",
          "value"
        ],
        "type": "object",
        "properties": {
          "propertyIdentifier": {
            "type": "string",
            "description": "The identifier of the property to filter on"
          },
          "value": {
            "type": "string",
            "description": "The value used by the filter"
          },
          "included": {
            "type": "boolean",
            "description": "true to include records where the value of the specified property matches the specified value, false to exclude those records"
          }
        },
        "description": "A filter for a string or enum property"
      },
      "PublicTemporalFilterDTO": {
        "required": [
          "daysOfWeek",
          "hoursOfDay",
          "monthsOfYear"
        ],
        "type": "object",
        "properties": {
          "hoursOfDay": {
            "type": "array",
            "description": "<p>When not empty, only include records that happened at the specified hour of the day.</p><ul><li>When the list is empty, there will be no filtering on the hour of the day.</li><li>When the list is not empty, only the records that happened in one of the specified hours of the day will be included.For example when the list contains <code>[3,4,14]</code>, the records for <code>[3:00 AM, 4:00 AM[</code>, <code>[4:00 AM, 5:00 AM[</code> and <code<[14:00 (2:00PM), 15:00 (3:00PM)[</code> will be included, and all other records will be excluded.</li></ul><p>The valid hours are between 0 (inclusive) and 23 (inclusive).",
            "items": {
              "type": "integer",
              "description": "<p>When not empty, only include records that happened at the specified hour of the day.</p><ul><li>When the list is empty, there will be no filtering on the hour of the day.</li><li>When the list is not empty, only the records that happened in one of the specified hours of the day will be included.For example when the list contains <code>[3,4,14]</code>, the records for <code>[3:00 AM, 4:00 AM[</code>, <code>[4:00 AM, 5:00 AM[</code> and <code<[14:00 (2:00PM), 15:00 (3:00PM)[</code> will be included, and all other records will be excluded.</li></ul><p>The valid hours are between 0 (inclusive) and 23 (inclusive).",
              "format": "int32"
            }
          },
          "daysOfWeek": {
            "type": "array",
            "description": "<p>When not empty, only include records that happened at the specified day of the week.</p><ul><li>When the list is empty, there will be no filtering on the day of the week.</li><li>When the list is not empty, only the records that happened on one of the specified days of the week will be included.For example when the list contains <code>[TUESDAY,FRIDAY]</code>, only the records that happened on a Tuesday or Friday will be included.All other records will be excluded.</li></ul>",
            "items": {
              "type": "string",
              "description": "<p>When not empty, only include records that happened at the specified day of the week.</p><ul><li>When the list is empty, there will be no filtering on the day of the week.</li><li>When the list is not empty, only the records that happened on one of the specified days of the week will be included.For example when the list contains <code>[TUESDAY,FRIDAY]</code>, only the records that happened on a Tuesday or Friday will be included.All other records will be excluded.</li></ul>",
              "enum": [
                "MONDAY",
                "TUESDAY",
                "WEDNESDAY",
                "THURSDAY",
                "FRIDAY",
                "SATURDAY",
                "SUNDAY"
              ]
            }
          },
          "monthsOfYear": {
            "type": "array",
            "description": "<p>When not empty, only include records that happened at the specified month of the year.</p><ul><li>When the list is empty, there will be no filtering on the day of the week.</li><li>When the list is not empty, only the records that happened during one of the specified months of the year will be included. For example when the list contains <code>[APRIL,JULY]</code>, only the records that happened in April or July will be included. All other records will be excluded.</li></ul>",
            "items": {
              "type": "string",
              "description": "<p>When not empty, only include records that happened at the specified month of the year.</p><ul><li>When the list is empty, there will be no filtering on the day of the week.</li><li>When the list is not empty, only the records that happened during one of the specified months of the year will be included. For example when the list contains <code>[APRIL,JULY]</code>, only the records that happened in April or July will be included. All other records will be excluded.</li></ul>",
              "enum": [
                "JANUARY",
                "FEBRUARY",
                "MARCH",
                "APRIL",
                "MAY",
                "JUNE",
                "JULY",
                "AUGUST",
                "SEPTEMBER",
                "OCTOBER",
                "NOVEMBER",
                "DECEMBER"
              ]
            }
          }
        },
        "description": "The temporal filter"
      },
      "PublicTemporalSingleRangeFilterDTO": {
        "required": [
          "endTimeDeltaInSeconds",
          "endTimeInSeconds",
          "endTimeType",
          "startTimeDeltaInSeconds",
          "startTimeInSeconds",
          "startTimeType"
        ],
        "type": "object",
        "properties": {
          "startTimeType": {
            "type": "string",
            "description": "<p>Defines how the start time is specified.</p><p>Note that only the combinations of start and end time types that are possible in the UI are supported.The behavior when using an unsupported combination is undefined.</p>",
            "enum": [
              "ABSOLUTE_TIME",
              "AFTER_START_OF_DATA",
              "BEFORE_END_OF_FILTER"
            ]
          },
          "startTimeDeltaInSeconds": {
            "type": "integer",
            "description": "<p>When the start time type is a relative type (<code>AFTER_START_OF_DATA</code>, <code>BEFORE_END_OF_FILTER</code>), this property defines the difference in seconds.</p><p>When using another start time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "startTimeInSeconds": {
            "type": "integer",
            "description": "<p>When the start time type is <code>ABSOLUTE_TIME</code>, this property defines the start time as the number of seconds since the epoch.</p><p>When using another start time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "endTimeType": {
            "type": "string",
            "description": "<p>Defines how the end time is specified.</p><p>Note that only the combinations of start and end time types that are possible in the UI are supported.The behavior when using an unsupported combination is undefined.</p>",
            "enum": [
              "ABSOLUTE_TIME",
              "BEFORE_END_OF_DATA",
              "AFTER_START_OF_FILTER"
            ]
          },
          "endTimeDeltaInSeconds": {
            "type": "integer",
            "description": "<p>When the end time type is a relative type (<code>BEFORE_END_OF_DATA</code>, <code>AFTER_START_OF_FILTER</code>), this property defines the difference in seconds.</p><p>When using another end time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "endTimeInSeconds": {
            "type": "integer",
            "description": "<p>When the end time type is <code>ABSOLUTE_TIME</code>, this property defines the end time as the number of seconds since the epoch.</p><p>When using another end time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          }
        },
        "description": "Defines a time range"
      },
      "PublicTrendAnalyticsDisplayPropertyOptions": {
        "required": [
          "aggregationMode",
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on trend diagrams."
          },
          "aggregationMode": {
            "type": "string",
            "description": "<p>The aggregation mode of the property that is currently displayed on the trend diagrams.</p><p>This must be one of the supported modes for that property.When using an unsupported property, the behavior is undefined.</p>",
            "enum": [
              "HISTOGRAM_MIN",
              "HISTOGRAM_MAX",
              "HISTOGRAM_AVG"
            ]
          }
        },
        "description": "<p>Determines which property is used on the trend diagrams when the mode is set to <code>DISPLAY_PROPERTY</code>.</p><p>This option is required when the mode is set to <code>DISPLAY_PROPERTY</code>.In all other cases, this property is optional and will be ignored when specified.</p>"
      },
      "GroupedByDayValue": {
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "description": "The day, calculated in the timezone specified in the request.",
            "enum": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
              "Sunday"
            ]
          },
          "value": {
            "type": "number",
            "description": "The value for that day",
            "format": "double"
          }
        },
        "description": "The trend values grouped by day. Only available when the <code>groupingMode</code> is set to <code>GROUP_BY_DAY</code>."
      },
      "GroupedByHourValue": {
        "type": "object",
        "properties": {
          "hour": {
            "maximum": 23,
            "minimum": 0,
            "type": "integer",
            "description": "<p>The hour, calculated in the timezone specified in the request.</p><p>Hour 0 goes from 0:00AM until 0:59AM, hour 1 goes from 01:00AM until 01:59AM, etc.</p>",
            "format": "int32"
          },
          "value": {
            "type": "number",
            "description": "The value for that hour",
            "format": "double"
          }
        },
        "description": "The trend values grouped by hour. Only available when the <code>groupingMode</code> is set to <code>GROUP_BY_HOUR</code>."
      },
      "PublicDownloadTrendDTO": {
        "required": [
          "groupingMode"
        ],
        "type": "object",
        "properties": {
          "groupingMode": {
            "type": "string",
            "description": "The grouping mode of the results",
            "enum": [
              "GROUP_BY_HOUR",
              "GROUP_BY_DAY",
              "NO_GROUPING"
            ]
          },
          "valuesByDay": {
            "type": "array",
            "description": "The trend values grouped by day. Only available when the <code>groupingMode</code> is set to <code>GROUP_BY_DAY</code>.",
            "items": {
              "$ref": "#/components/schemas/GroupedByDayValue"
            }
          },
          "valuesByHour": {
            "type": "array",
            "description": "The trend values grouped by hour. Only available when the <code>groupingMode</code> is set to <code>GROUP_BY_HOUR</code>.",
            "items": {
              "$ref": "#/components/schemas/GroupedByHourValue"
            }
          },
          "values": {
            "type": "array",
            "description": "The trend values. Only available when the <code>groupingMode</code> is set to <code>NO_GROUPING</code>.",
            "items": {
              "$ref": "#/components/schemas/UngroupedValue"
            }
          }
        }
      },
      "UngroupedValue": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The start time of the bucket",
            "format": "date-time"
          },
          "value": {
            "type": "number",
            "description": "The value for the bucket",
            "format": "double"
          }
        },
        "description": "The trend values. Only available when the <code>groupingMode</code> is set to <code>NO_GROUPING</code>."
      },
      "PublicDownloadTableDataProperties": {
        "required": [
          "columns"
        ],
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "The ids of the columns that should be included in the table (ordered)",
            "items": {
              "type": "string",
              "description": "The ids of the columns that should be included in the table (ordered)"
            }
          },
          "maxNumberOfRows": {
            "type": "integer",
            "description": "<p>The maximum number of rows to include in the table.</p><p>Note that the platform has an internal limit to the number of rows it will return. Requesting more rows will still limit it to that internal limit.</p>",
            "format": "int32"
          }
        },
        "description": "Specifies the properties specific to the table"
      },
      "PublicDownloadTableDataRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDownloadTableDataProperties"
          }
        }
      },
      "PublicDownloadTableDTO": {
        "required": [
          "columns",
          "rows"
        ],
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "The name of the columns in the table",
            "items": {
              "type": "string",
              "description": "The name of the columns in the table"
            }
          },
          "rows": {
            "type": "array",
            "description": "<p>The rows of the table.</p><p>Each row contains a mapping from the column name to the corresponding value.</p>",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "description": "<p>The rows of the table.</p><p>Each row contains a mapping from the column name to the corresponding value.</p>"
              },
              "description": "<p>The rows of the table.</p><p>Each row contains a mapping from the column name to the corresponding value.</p>"
            }
          }
        }
      },
      "PublicDownloadOriginDestinationDataProperties": {
        "required": [
          "areas"
        ],
        "type": "object",
        "properties": {
          "areas": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The areas to include in the matrix",
            "items": {
              "type": "string",
              "description": "The areas to include in the matrix"
            }
          },
          "mode": {
            "type": "string",
            "description": "Defines which property is used in the matrix. When not specified, <code>NUMBER_OF_TRIPS</code> is used",
            "enum": [
              "NUMBER_OF_TRIPS",
              "PERCENTAGE_OF_TRIPS_SAME_ORIGIN",
              "PERCENTAGE_OF_TRIPS_SAME_DESTINATION",
              "AVERAGE_TRAVEL_TIME"
            ]
          }
        },
        "description": "Specifies the properties specific to the origin destination matrix"
      },
      "PublicDownloadOriginDestinationDataRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDownloadOriginDestinationDataProperties"
          }
        }
      },
      "PublicDownloadOriginDestinationDTO": {
        "required": [
          "mode",
          "originToDestinationsMapping"
        ],
        "type": "object",
        "properties": {
          "originToDestinationsMapping": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "type": "number",
                "description": "<p>The mappings from the origin areas ids to the destinations and their value</p><p>The key in the first map is the origin area id.</p><p>The corresponding value is another map where the key is the destination area id and the value is the matrix value for the origin-destination pair.</p>",
                "format": "double"
              },
              "description": "<p>The mappings from the origin areas ids to the destinations and their value</p><p>The key in the first map is the origin area id.</p><p>The corresponding value is another map where the key is the destination area id and the value is the matrix value for the origin-destination pair.</p>",
              "example": {
                "originArea1": {
                  "destinationArea1": 5,
                  "destinationArea2": 3,
                  "destinationArea3": 2
                },
                "originArea2": {
                  "destinationArea1": 6,
                  "destinationArea2": 4,
                  "destinationArea3": 3
                },
                "originArea3": {
                  "destinationArea1": 7,
                  "destinationArea2": 5,
                  "destinationArea3": 4
                }
              }
            },
            "description": "<p>The mappings from the origin areas ids to the destinations and their value</p><p>The key in the first map is the origin area id.</p><p>The corresponding value is another map where the key is the destination area id and the value is the matrix value for the origin-destination pair.</p>",
            "example": {
              "originArea1": {
                "destinationArea1": 5,
                "destinationArea2": 3,
                "destinationArea3": 2
              },
              "originArea2": {
                "destinationArea1": 6,
                "destinationArea2": 4,
                "destinationArea3": 3
              },
              "originArea3": {
                "destinationArea1": 7,
                "destinationArea2": 5,
                "destinationArea3": 4
              }
            }
          },
          "mode": {
            "type": "string",
            "description": "The property used in the matrix",
            "enum": [
              "NUMBER_OF_TRIPS",
              "PERCENTAGE_OF_TRIPS_SAME_ORIGIN",
              "PERCENTAGE_OF_TRIPS_SAME_DESTINATION",
              "AVERAGE_TRAVEL_TIME"
            ]
          }
        }
      },
      "PublicDownloadDwellTimeDataProperties": {
        "required": [
          "areas"
        ],
        "type": "object",
        "properties": {
          "areas": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "The areas to include in the dwell time analysis",
            "items": {
              "type": "string",
              "description": "The areas to include in the dwell time analysis"
            }
          },
          "type": {
            "type": "string",
            "description": "Defines which dwell time analysis is requested, if not specified <code>AVERAGE</code> is used",
            "enum": [
              "INDIVIDUAL",
              "AVERAGE",
              "TREND"
            ]
          }
        },
        "description": "Specifies the properties specific to the dwell time analysis"
      },
      "PublicDownloadDwellTimeDataRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDownloadDwellTimeDataProperties"
          }
        }
      },
      "PublicDownloadDwellTimeDTO": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "averageDwellTimeAnalysisResult": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PublicSingleAreaDwellTimeAnalysisSummaryDTO"
            },
            "description": "<p>The mappings from the areas to the dwell time results for the area.</p><p>The key in the map is the area identifier.</p><p>The corresponding value is the average dwell time for that area.</p><p>This map is only available when the dwell time analysis is of type <code>AVERAGE</code>.</p>"
          },
          "individualDwellTimeAnalysisResult": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/PublicSingleAssetSingleAreaDwellTimeAnalysisResultDTO"
              },
              "description": "<p>The mappings from the areas to the dwell time results for the each asset within the area, at individual level.</p><p>The key in the first map is the area identifier.</p><p>The corresponding is another map where the key is asset id and the value is the dwell time analysis for that asset in that particular area.</p><p>This map is only available when the dwell time analysis is of type <code>INDIVIDUAL</code>.</p>"
            },
            "description": "<p>The mappings from the areas to the dwell time results for the each asset within the area, at individual level.</p><p>The key in the first map is the area identifier.</p><p>The corresponding is another map where the key is asset id and the value is the dwell time analysis for that asset in that particular area.</p><p>This map is only available when the dwell time analysis is of type <code>INDIVIDUAL</code>.</p>"
          },
          "trendDwellTimeAnalysisResult": {
            "$ref": "#/components/schemas/PublicTrendDwellTimeAnalysisDTO"
          },
          "type": {
            "type": "string",
            "description": "The type of dwell time requested",
            "enum": [
              "INDIVIDUAL",
              "AVERAGE",
              "TREND"
            ]
          }
        }
      },
      "PublicSingleAreaDwellTimeAnalysisSummaryDTO": {
        "required": [
          "area",
          "averageNumberOfVisitsInArea",
          "averageTimeSpentInSeconds",
          "maxNumberOfVisitsInArea",
          "maxTimeSpentInSeconds",
          "minNumberOfVisitsInArea",
          "minTimeSpentInSeconds",
          "totalNumberOfAssetsInArea"
        ],
        "type": "object",
        "properties": {
          "area": {
            "type": "string",
            "description": "The id of the area for which this are the average dwell time results"
          },
          "minTimeSpentInSeconds": {
            "type": "integer",
            "description": "From all assets in this area, what is the shortest time an asset spends in the area",
            "format": "int32"
          },
          "maxTimeSpentInSeconds": {
            "type": "integer",
            "description": "From all assets in this area, what is the longest time an asset spends in the area",
            "format": "int32"
          },
          "averageTimeSpentInSeconds": {
            "type": "integer",
            "description": "Over all assets in this area, denotes the average time spent in the area.",
            "format": "int32"
          },
          "totalNumberOfAssetsInArea": {
            "type": "integer",
            "description": "The number of different assets that are in the area.",
            "format": "int32"
          },
          "minNumberOfVisitsInArea": {
            "type": "integer",
            "description": "The minimum number of times a single asset visited this area. This is typically 1, but it can be more also.",
            "format": "int32"
          },
          "maxNumberOfVisitsInArea": {
            "type": "integer",
            "description": "The maximum number of times a single asset visited this area. This is typically 1, but it can be more also.",
            "format": "int32"
          },
          "averageNumberOfVisitsInArea": {
            "type": "number",
            "description": "The average number of times an asset comes in this area (during the query time).",
            "format": "float"
          }
        },
        "description": "<p>For each area, for each time instance, there is an average dwell time. The lists are sorted according to the timeInstances list.</p><p>The key of the map is the id of the area.</p><p>The corresponding value is a list of dwell times for the different areas. The list contains one item for each of the <code>timeInstances</code>, in the same order as the <code>timeInstances</code>.</p>"
      },
      "PublicSingleAssetSingleAreaDwellTimeAnalysisResultDTO": {
        "required": [
          "averageTimeSpentInSeconds",
          "maxTimeSpentInSeconds",
          "minTimeSpentInSeconds",
          "totalNumberOfVisits",
          "totalTimeSpentInSeconds",
          "visits"
        ],
        "type": "object",
        "properties": {
          "minTimeSpentInSeconds": {
            "type": "integer",
            "description": "From all the visits to this area, what is the minimal time spent in the area by the asset.",
            "format": "int32"
          },
          "maxTimeSpentInSeconds": {
            "type": "integer",
            "description": "From all the visits to this area, what is the maximal time spent in the area by the asset.",
            "format": "int32"
          },
          "averageTimeSpentInSeconds": {
            "type": "integer",
            "description": "From all the visits to this area, what is the average time spent in the area by the asset.",
            "format": "int32"
          },
          "totalNumberOfVisits": {
            "type": "integer",
            "description": "The number of times the asset is in the area.",
            "format": "int32"
          },
          "totalTimeSpentInSeconds": {
            "type": "integer",
            "description": "Total time spent in this area, adding up all visits.",
            "format": "int32"
          },
          "visits": {
            "type": "array",
            "description": "All visits with start and end times in this area for the respective asset.",
            "items": {
              "$ref": "#/components/schemas/PublicSingleIndividualAreaVisitDTO"
            }
          }
        },
        "description": "<p>The mappings from the areas to the dwell time results for the each asset within the area, at individual level.</p><p>The key in the first map is the area identifier.</p><p>The corresponding is another map where the key is asset id and the value is the dwell time analysis for that asset in that particular area.</p><p>This map is only available when the dwell time analysis is of type <code>INDIVIDUAL</code>.</p>"
      },
      "PublicSingleIndividualAreaVisitDTO": {
        "required": [
          "firstTimeInsideInSeconds",
          "lastTimeInsideInSeconds"
        ],
        "type": "object",
        "properties": {
          "firstTimeInsideInSeconds": {
            "type": "integer",
            "description": "Time in seconds since EPOCH that the asset is seen for the first time for this visit in the area",
            "format": "int64"
          },
          "lastTimeInsideInSeconds": {
            "type": "integer",
            "description": "Time in seconds since EPOCH that the asset is seen for the last time for this visit in the area",
            "format": "int64"
          }
        },
        "description": "All visits with start and end times in this area for the respective asset."
      },
      "PublicTrendDwellTimeAnalysisDTO": {
        "required": [
          "areaToSummaryDwellTimeAnalysisResults",
          "timeInstances"
        ],
        "type": "object",
        "properties": {
          "timeInstances": {
            "type": "array",
            "description": "Sorted time instances for which the average dwell times are computed.",
            "items": {
              "type": "string",
              "description": "Sorted time instances for which the average dwell times are computed.",
              "format": "date-time"
            }
          },
          "areaToSummaryDwellTimeAnalysisResults": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "description": "<p>For each area, for each time instance, there is an average dwell time. The lists are sorted according to the timeInstances list.</p><p>The key of the map is the id of the area.</p><p>The corresponding value is a list of dwell times for the different areas. The list contains one item for each of the <code>timeInstances</code>, in the same order as the <code>timeInstances</code>.</p>",
              "items": {
                "$ref": "#/components/schemas/PublicSingleAreaDwellTimeAnalysisSummaryDTO"
              }
            },
            "description": "<p>For each area, for each time instance, there is an average dwell time. The lists are sorted according to the timeInstances list.</p><p>The key of the map is the id of the area.</p><p>The corresponding value is a list of dwell times for the different areas. The list contains one item for each of the <code>timeInstances</code>, in the same order as the <code>timeInstances</code>.</p>"
          }
        },
        "description": "<p>The trends of the average dwell time for each area.</p><p>The trend is only available when the dwell time analysis is of type <code>TREND</code>.</p>"
      },
      "PublicDistributionAnalyticsDisplayPropertyOptions": {
        "required": [
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on distribution diagrams."
          }
        },
        "description": "<p>Determines which property is used on the distribution diagrams.</p>"
      },
      "PublicDownloadDistributionDataProperties": {
        "required": [
          "displayPropertyOptions"
        ],
        "type": "object",
        "properties": {
          "displayPropertyOptions": {
            "$ref": "#/components/schemas/PublicDistributionAnalyticsDisplayPropertyOptions"
          }
        },
        "description": "Specifies the properties specific to the distribution"
      },
      "PublicDownloadDistributionDataRequest": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDownloadDistributionDataProperties"
          }
        }
      },
      "NumericIntervalDistributionValue": {
        "required": [
          "intervalMaxValue",
          "intervalMinValue",
          "ratio"
        ],
        "type": "object",
        "properties": {
          "intervalMinValue": {
            "type": "number",
            "description": "The minimum value of the numeric interval",
            "format": "double"
          },
          "intervalMaxValue": {
            "type": "number",
            "description": "The maximum value of the numeric interval",
            "format": "double"
          },
          "ratio": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The ratio of records (value between 0 and 1) where the property value is contained in this interval",
            "format": "double"
          }
        },
        "description": "The list of distribution intervals, and the corresponding ratio for that interval"
      },
      "PublicDownloadDistributionDTO": {
        "required": [
          "distributionType"
        ],
        "type": "object",
        "properties": {
          "distributionType": {
            "type": "string",
            "description": "The type of the distribution.",
            "enum": [
              "NUMERIC_INTERVAL_PROPERTY",
              "STRING_PROPERTY"
            ]
          },
          "numericIntervalDistribution": {
            "$ref": "#/components/schemas/PublicDownloadNumericIntervalDistributionDTO"
          },
          "stringDistribution": {
            "$ref": "#/components/schemas/PublicDownloadStringDistributionDTO"
          }
        }
      },
      "PublicDownloadNumericIntervalDistributionDTO": {
        "required": [
          "distribution"
        ],
        "type": "object",
        "properties": {
          "distribution": {
            "type": "array",
            "description": "The list of distribution intervals, and the corresponding ratio for that interval",
            "items": {
              "$ref": "#/components/schemas/NumericIntervalDistributionValue"
            }
          }
        },
        "description": "<p>The distribution in case the <code>distributionType</code> is <code>NUMERIC_INTERVAL_PROPERTY</code>, null otherwise.</p><p>Can also be <code>null</code> when there is no distribution data available matching the request.</p>"
      },
      "PublicDownloadStringDistributionDTO": {
        "required": [
          "distribution"
        ],
        "type": "object",
        "properties": {
          "distribution": {
            "type": "array",
            "description": "The list of distribution values, and the corresponding ratio for that value",
            "items": {
              "$ref": "#/components/schemas/StringDistributionValue"
            }
          }
        },
        "description": "<p>The distribution in case the <code>distributionType</code> is <code>STRING_PROPERTY</code>, null otherwise.</p><p>Can also be <code>null</code> when there is no distribution data available matching the request.</p>"
      },
      "StringDistributionValue": {
        "required": [
          "ratio",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The string value"
          },
          "ratio": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The ratio of records (value between 0 and 1) where the property value matches the string value",
            "format": "double"
          }
        },
        "description": "The list of distribution values, and the corresponding ratio for that value"
      },
      "PublicDownloadAssetIdsDataRequest": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicDownloadDataFilter"
          }
        }
      },
      "PublicDownloadAssetIdsDTO": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "description": "The ids of all matching assets, could be empty.",
            "items": {
              "type": "string",
              "description": "The ids of all matching assets, could be empty."
            }
          }
        }
      },
      "LoginRequest": {
        "required": [
          "password",
          "userName"
        ],
        "type": "object",
        "properties": {
          "userName": {
            "type": "string",
            "description": "The user name of the API user. This user name was visible when you created the API user in the web UI."
          },
          "password": {
            "type": "string",
            "description": "The password of the API user. This password was visible when you created the API user in the web UI."
          }
        }
      },
      "JWTTokenDTO": {
        "required": [
          "jwtToken"
        ],
        "type": "object",
        "properties": {
          "jwtToken": {
            "type": "string",
            "description": "The access token. This token is only valid for a short amount of time. If you use a long running script, make sure to request a new token now and then."
          }
        }
      },
      "PublicAddMapDataToProjectRequest": {
        "required": [
          "mapDataId"
        ],
        "type": "object",
        "properties": {
          "mapDataId": {
            "type": "string",
            "description": "The id of the mapdata to add to the project"
          }
        }
      },
      "PublicAddDataSetToProjectRequest": {
        "required": [
          "dataSetId"
        ],
        "type": "object",
        "properties": {
          "dataSetId": {
            "type": "string",
            "description": "The id of the data set to add to the project"
          }
        }
      },
      "CreatePublicVisualAnalyticsWidgetRequest": {
        "required": [
          "properties",
          "state",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "state": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsPageState"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicTemporalRangeFilterDTO": {
        "required": [
          "endTimeDeltaInSeconds",
          "endTimeInSeconds",
          "endTimeType",
          "startTimeDeltaInSeconds",
          "startTimeInSeconds",
          "startTimeType"
        ],
        "type": "object",
        "properties": {
          "startTimeType": {
            "type": "string",
            "description": "<p>Defines how the start time is specified.</p><p>Note that only the combinations of start and end time types that are possible in the UI are supported.The behavior when using an unsupported combination is undefined.</p>",
            "enum": [
              "ABSOLUTE_TIME",
              "AFTER_START_OF_DATA",
              "BEFORE_END_OF_FILTER",
              "SAME_AS_START_TIME_OF_OTHER_MAP",
              "AFTER_END_OF_FIRST_MAP_FILTER"
            ]
          },
          "startTimeDeltaInSeconds": {
            "type": "integer",
            "description": "<p>When the start time type is a relative type (<code>AFTER_START_OF_DATA</code>, <code>BEFORE_END_OF_FILTER</code>, <code>AFTER_END_OF_FIRST_MAP_FILTER</code>), this property defines the difference in seconds.</p><p>When using another start time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "startTimeInSeconds": {
            "type": "integer",
            "description": "<p>When the start time type is <code>ABSOLUTE_TIME</code>, this property defines the start time as the number of seconds since the epoch.</p><p>When using another start time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "endTimeType": {
            "type": "string",
            "description": "<p>Defines how the end time is specified.</p><p>Note that only the combinations of start and end time types that are possible in the UI are supported.The behavior when using an unsupported combination is undefined.</p>",
            "enum": [
              "ABSOLUTE_TIME",
              "BEFORE_END_OF_DATA",
              "AFTER_START_OF_FILTER",
              "SAME_AS_END_TIME_OF_OTHER_MAP",
              "BEFORE_START_OF_SECOND_MAP_FILTER"
            ]
          },
          "endTimeDeltaInSeconds": {
            "type": "integer",
            "description": "<p>When the end time type is a relative type (<code>BEFORE_END_OF_DATA</code>, <code>AFTER_START_OF_FILTER</code>, <code>BEFORE_START_OF_SECOND_MAP_FILTER</code>), this property defines the difference in seconds.</p><p>When using another end time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          },
          "endTimeInSeconds": {
            "type": "integer",
            "description": "<p>When the end time type is <code>ABSOLUTE_TIME</code>, this property defines the end time as the number of seconds since the epoch.</p><p>When using another end time type, the value of this property will be ignored. The property should however still be specified.</p>",
            "format": "int64"
          }
        },
        "description": "Defines a time range"
      },
      "PublicVisualAnalyticsAdditiveColorMapDTO": {
        "required": [
          "startColor"
        ],
        "type": "object",
        "properties": {
          "startColor": {
            "type": "string",
            "description": "The start color for the additive color map as hex string."
          },
          "fromValue": {
            "type": "number",
            "description": "<p>Defines the minimum or start value from where this color map is used to determine the color.</p><p>The color mapping will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "toValue": {
            "type": "number",
            "description": "<p>Defines the maximum or end value from where this color map is used to determine the color.</p><p>The color mapping will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "lowerValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values smaller than <code>fromValue</code>.</p>"
          },
          "upperValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values greater than <code>toValue</code>.</p>"
          },
          "noDataHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>"
          }
        },
        "description": "<p>Use an additive color map as color map for a numerical property.</p><p>An additive color map is created by selecting a (dark) color as start color, and that color is added up repeatedly to define the color map.</p><p>For numerical properties, the color map specifies the mapping from a numeric value to a color.</p>"
      },
      "PublicVisualAnalyticsColorPaletteDTO": {
        "type": "object",
        "properties": {
          "propertyValueToHexColor": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "<p>Mapping from the property value to the color for that value.The key is the property value, the value is the color.</p><p>The color is expressed as a hex string, for example #FF69B4.</p>"
            },
            "description": "<p>Mapping from the property value to the color for that value.The key is the property value, the value is the color.</p><p>The color is expressed as a hex string, for example #FF69B4.</p>"
          },
          "otherValuesHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the property values that aren't included in the <code>propertyValueToHexColor</code> mapping.</p><p>Otherwise, random colors will be selected for those property values.</p>"
          },
          "noDataHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>"
          }
        },
        "description": "<p>The color palette for a string or enum property.</p><p>For string/enum properties, the color palette defines which color should be represent which value.</p><p>The color palette is ignored for numeric properties.</p>"
      },
      "PublicVisualAnalyticsDataSetProperties": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "visualizationMode": {
            "type": "string",
            "description": "<p>The mode in which the data is displayed.</p><p>When not specified, <code>GRIDDED</code> is used.</p>",
            "enum": [
              "GRIDDED",
              "TRAJECTORIES",
              "REALTIME"
            ]
          },
          "griddedDisplayOptions": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGriddedDisplayOptions"
          },
          "realtimeDisplayOptions": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsRealtimeDisplayOptions"
          },
          "trajectoriesDisplayOptions": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTrajectoriesDisplayOptions"
          },
          "perPropertyStyling": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsPerPropertyStylingDTO"
            },
            "description": "<p>Mapping from the property id to the style information for that property.The key of the map is the id of the property, the value is the style information for that property.</p><p>Properties not included in this mapping will use default styling.</p><p>This styling is used for all data visualization modes (gridded, realtime and trajectories).</p>"
          },
          "singleHexColorStyle": {
            "type": "string",
            "description": "<p>Some visualizations can only use a single color, which is defined here as a hex string.</p><p>For example, when visualizing the occurrence of data in gridded, realtime or trajectory mode, each occurrence is visualized in the same color.</p>"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>The timezone for this data set, which is used to interpret the time filters.</p><p>For example if you specify to only include data on a Monday, the platform will interpret this as a Monday in the specified timezone</p><p>When not specified, the platform assumes the data set uses the same time zone as the timeline.</p>"
          },
          "visible": {
            "type": "boolean",
            "description": "Controls the visibility of the layer"
          }
        },
        "description": "The styling and filtering properties for a data set."
      },
      "PublicVisualAnalyticsDistributionWidgetProperties": {
        "required": [
          "dataSetId"
        ],
        "type": "object",
        "properties": {
          "dataSetId": {
            "type": "string",
            "description": "The id of the data set of the distribution widget"
          },
          "distributionWidgetMode": {
            "type": "string",
            "description": "<p>Defines the mode of the distribution widget.The widget can show the number of assets, the ids or the distribution of a specific property.</p>",
            "enum": [
              "SHOW_NUMBER_OF_ASSETS",
              "SHOW_IDS",
              "SHOW_PROPERTY"
            ]
          },
          "distributionPropertyId": {
            "type": "string",
            "description": "<p>Defines which property is shown on the distribution widget.This must be one of the supported properties of the active data set of the map for which the widget is created.</p><p>This property must be provided when the <code>distributionWidgetMode</code> to <code>SHOW_PROPERTY</code>."
          }
        },
        "description": "<p>Defines the properties specific to a distribution widget.</p><p>This property must be provided when the <code>widgetType</code> is set to <code>DISTRIBUTION</code>.</p>"
      },
      "PublicVisualAnalyticsFrontendAdditiveBlendingColorMapDTO": {
        "required": [
          "startColor"
        ],
        "type": "object",
        "properties": {
          "startColor": {
            "type": "string",
            "description": "The start color for the additive color map as hex string."
          }
        },
        "description": "<p>Use an additive blending color map as color map for a numerical property.</p><p>An additive color map is created by selecting a (dark) color as start color, and that color is added up repeatedly to define the color map.</p>"
      },
      "PublicVisualAnalyticsGradientColorMapDTO": {
        "required": [
          "startHexColor",
          "stopHexColor"
        ],
        "type": "object",
        "properties": {
          "startHexColor": {
            "type": "string",
            "description": "<p>The start color of the gradient interpolation.</p><p>The color map will use gradient interpolation to go from <code>startHexColor</code> to <code>endHexColor</code>.</p>"
          },
          "stopHexColor": {
            "type": "string",
            "description": "<p>The stop color of the gradient interpolation.</p><p>The color map will use gradient interpolation to go from <code>startHexColor</code> to <code>endHexColor</code>.</p>"
          },
          "fromValue": {
            "type": "number",
            "description": "<p>Defines the minimum or start value from where this color map is used to determine the color.</p><p>The color mapping will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "toValue": {
            "type": "number",
            "description": "<p>Defines the maximum or end value from where this color map is used to determine the color.</p><p>The color mapping will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "lowerValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values smaller than <code>fromValue</code>.</p>"
          },
          "upperValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values greater than <code>toValue</code>.</p>"
          },
          "noDataHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>"
          }
        },
        "description": "<p>Use a gradient-based color map for a numerical property.</p><p>For numerical properties, the color map specifies the mapping from a numeric value to a color. You can only specify a single color map for a numerical property. If you specify multiple ones, it is undefined which of the specified color maps will be used.</p>"
      },
      "PublicVisualAnalyticsGriddedDisplayOptions": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "<p>Determines what is shown on the spatial map.</p><p>The styling that will be used depends on the chosen mode:</p><ul><li><code>COLOR_BY_PROPERTY</code>: the styling is defined one level higher in the <code>perPropertyStyling</code> property.</li><li><code>COLOR_BY_NUMBER_OF_ASSETS</code>: the styling is defined in the <code>colorByNumberOfAssetsColorMap</code> property.</li><li><code>COLOR_BY_NUMBER_OF_RECORDS</code>: the styling is defined in the <code>colorByNumberOfRecordsColorMap</code> property.</li><li><code>COLOR_BY_OCCURRENCE</code>: the styling is defined one level higher in the <code>singleHexColorStyle</code> property.</li></ul>",
            "enum": [
              "COLOR_BY_PROPERTY",
              "COLOR_BY_NUMBER_OF_ASSETS",
              "COLOR_BY_NUMBER_OF_RECORDS",
              "COLOR_BY_OCCURRENCE"
            ]
          },
          "colorByProperty": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGriddedSpatialMapPropertyOptions"
          },
          "colorByNumberOfAssetsColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGriddedPerComputedPropertyStylingDTO"
          },
          "colorByNumberOfRecordsColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGriddedPerComputedPropertyStylingDTO"
          }
        },
        "description": "<p>The display options when showing GRIDDED data on the spatial map.</p><p>Required when the <code>visualizationMode</code> is set to <code>GRIDDED</code>. Ignored when another mode is used.</p>"
      },
      "PublicVisualAnalyticsGriddedPerComputedPropertyStylingDTO": {
        "type": "object",
        "properties": {
          "heatMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsNamedHeatmapDTO"
          },
          "additiveColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsAdditiveColorMapDTO"
          },
          "gradientColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGradientColorMapDTO"
          },
          "intervalColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsIntervalColorMapDTO"
          }
        },
        "description": "Defines the styling for the gridded specific visualizations"
      },
      "PublicVisualAnalyticsGriddedSpatialMapPropertyOptions": {
        "required": [
          "aggregationMode",
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on the spatial map."
          },
          "aggregationMode": {
            "type": "string",
            "description": "<p>The aggregation mode of the property that is currently displayed on the spatial map.</p><p>This must be one of the supported modes for that property.When using an unsupported property, the behavior is undefined.</p>",
            "enum": [
              "SPATIAL_MAP_MODE",
              "SPATIAL_MAP_MIN",
              "SPATIAL_MAP_MAX",
              "SPATIAL_MAP_AVG"
            ]
          }
        },
        "description": "<p>Determines which property is visualized on the spatial map when the mode is set to <code>COLOR_BY_PROPERTY</code>.</p><p>This option is required when the mode is set to <code>COLOR_BY_PROPERTY</code>.In all other cases, this property is optional and will be ignored when specified.</p>"
      },
      "PublicVisualAnalyticsIconStyle": {
        "type": "object",
        "properties": {
          "size": {
            "maximum": 30,
            "minimum": 1,
            "type": "integer",
            "description": "The size of the icon",
            "format": "int32"
          },
          "standardIcon": {
            "type": "string",
            "description": "<p>The type of the icon.</p><p>When not specified, a default value will be chosen.</p>",
            "enum": [
              "DOT",
              "VESSEL",
              "PLANE",
              "CAR",
              "ARROW_IN_CIRCLE",
              "ARROW",
              "SMALL_DOT"
            ]
          }
        },
        "description": "<p>The style of the icon.</p><p>When not specified, a default icon will be chosen.</p>"
      },
      "PublicVisualAnalyticsIntervalColorMapDTO": {
        "required": [
          "colors",
          "values"
        ],
        "type": "object",
        "properties": {
          "values": {
            "maxItems": 2147483647,
            "minItems": 2,
            "type": "array",
            "description": "<p>Defines the intervals of the color map.</p><p>The first interval goes from <code>[value[0],value[1][</code> and the corresponding color is <code>colors[0]</code>, the second interval goes from <code>[value[1],value[2][</code> and the corresponding color is <code>colors[1]</code>, ... . This implies that the <code>values.length == colors.length + 1</code>.</p>",
            "items": {
              "type": "number",
              "description": "<p>Defines the intervals of the color map.</p><p>The first interval goes from <code>[value[0],value[1][</code> and the corresponding color is <code>colors[0]</code>, the second interval goes from <code>[value[1],value[2][</code> and the corresponding color is <code>colors[1]</code>, ... . This implies that the <code>values.length == colors.length + 1</code>.</p>",
              "format": "double"
            }
          },
          "colors": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the colors of the color map, expressed as hex strings.</p><p>The first interval goes from <code>[value[0],value[1][</code> and the corresponding color is <code>colors[0]</code>, the second interval goes from <code>[value[1],value[2][</code> and the corresponding color is <code>colors[1]</code>, ... . This implies that the <code>values.length == colors.length + 1</code>.</p>",
            "items": {
              "type": "string",
              "description": "<p>Defines the colors of the color map, expressed as hex strings.</p><p>The first interval goes from <code>[value[0],value[1][</code> and the corresponding color is <code>colors[0]</code>, the second interval goes from <code>[value[1],value[2][</code> and the corresponding color is <code>colors[1]</code>, ... . This implies that the <code>values.length == colors.length + 1</code>.</p>"
            }
          },
          "lowerValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values smaller than <code>values[0]</code>.</p>"
          },
          "upperValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values greater than <code>values[values.length-1]</code>.</p>"
          },
          "noDataHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>"
          }
        },
        "description": "<p>Use a color map where you define intervals or ranges and their corresponding color.</p><p>An interval based color map is defined by splitting the range of the color map into different sub-ranges or intervals, and specify a color for each of those intervals.</p><p>For numerical properties, the color map specifies the mapping from a numeric value to a color. You can only specify a single color map for a numerical property. If you specify multiple ones, it is undefined which of the specified color maps will be used.</p>"
      },
      "PublicVisualAnalyticsMapDataLayerStyleDTO": {
        "type": "object",
        "properties": {
          "visible": {
            "type": "boolean",
            "description": "Controls the visibility of the layer"
          },
          "opacity": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The opacity of the layer. This is a value between 0 (= transparent) and 1 (= opaque).",
            "format": "double"
          },
          "brightness": {
            "maximum": 1,
            "minimum": 0,
            "type": "number",
            "description": "The brightness of the layer. This is a value between 0 (= dark) and 1 (= bright).",
            "format": "double"
          },
          "paintLabels": {
            "type": "boolean",
            "description": "Controls the visibility of the layer labels"
          },
          "labelFontSize": {
            "type": "integer",
            "description": "The font size for the labels",
            "format": "int32"
          },
          "labelColor": {
            "type": "string",
            "description": "The color of the labels, expressed as a hex string"
          },
          "paintStroke": {
            "type": "boolean",
            "description": "Controls the visibility of the stroke"
          },
          "strokeWidth": {
            "type": "integer",
            "description": "The width of the stroke, expressed in pixels",
            "format": "int32"
          },
          "strokeColor": {
            "type": "string",
            "description": "The color of the stroke, expressed as a hex string"
          },
          "paintFill": {
            "type": "boolean",
            "description": "Controls the visibility of the fill"
          },
          "fillColor": {
            "type": "string",
            "description": "The color of the fill, expressed as a hex string"
          }
        },
        "description": "<p>Describes the style of a map data layer.</p><p>Depending of the type of map data, only a subset of the options is used. For example, when working with WMS data, all the stroke, label and fill style settings will be ignored.</p>"
      },
      "PublicVisualAnalyticsNamedHeatmapDTO": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the heatmap",
            "enum": [
              "BONE",
              "COOL",
              "HOT",
              "JET",
              "JET2",
              "PLASMA",
              "RAINBOW",
              "RAINBOW2",
              "SPRING",
              "VIRIDIS"
            ]
          },
          "fromValue": {
            "type": "number",
            "description": "<p>Defines the minimum or start value from where this heatmap is used to determine the color.</p><p>The color mapping defined in the heatmap will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "toValue": {
            "type": "number",
            "description": "<p>Defines the maximum or end value from where this heatmap is used to determine the color.</p><p>The color mapping defined in the heatmap will be applied on all the values from <code>fromValue</code> to <code>toValue</code>.</p><p>The colors used for values outside this range are defined in <code>lowerValuesHexColor</code> and <code>upperValuesHexColor</code>.</p>",
            "format": "double"
          },
          "lowerValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values smaller than <code>fromValue</code>.</p>"
          },
          "upperValuesHexColor": {
            "type": "string",
            "description": "<p>Defines the color to use for values greater than <code>toValue</code>.</p>"
          },
          "noDataHexColor": {
            "type": "string",
            "description": "<p>When specified, this color will be used for the No Data values.</p><p>Otherwise, a random color will be used for those values.</p>"
          }
        },
        "description": "<p>Use a heatmap as color map for a numerical property.</p><p>For numerical properties, the color map specifies the mapping from a numeric value to a color. You can only specify a single color map for a numerical property. If you specify multiple ones, it is undefined which of the specified color maps will be used.</p>"
      },
      "PublicVisualAnalyticsPageState": {
        "required": [
          "individualMapStates"
        ],
        "type": "object",
        "properties": {
          "individualMapStates": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "The state of each map of the visual analytics page. This should contain either 1 or 2 elements.",
            "items": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsSingleMapState"
            }
          }
        },
        "description": "The state of the visual analytics page"
      },
      "PublicVisualAnalyticsPerPropertyStylingDTO": {
        "type": "object",
        "properties": {
          "colorPalette": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsColorPaletteDTO"
          },
          "heatMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsNamedHeatmapDTO"
          },
          "additiveColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsAdditiveColorMapDTO"
          },
          "gradientColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsGradientColorMapDTO"
          },
          "intervalColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsIntervalColorMapDTO"
          }
        },
        "description": "Defines the styling when visualizing a specific property on the spatial map."
      },
      "PublicVisualAnalyticsRealtimeDisplayOptions": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "<p>Determines what is shown on the spatial map.</p><p>The styling that will be used depends on the chosen mode:</p><ul><li><code>COLOR_BY_PROPERTY</code>: the styling is defined one level higher in the <code>perPropertyStyling</code> property.</li><li><code>COLOR_BY_NUMBER_OF_RECORDS</code>: the styling is defined in the <code>colorByNumberOfRecordsColorMap</code> property.</li><li><code>COLOR_BY_OCCURRENCE</code>: the styling is defined one level higher in the <code>singleHexColorStyle</code> property.</li></ul>",
            "enum": [
              "COLOR_BY_PROPERTY",
              "COLOR_BY_NUMBER_OF_RECORDS",
              "COLOR_BY_OCCURRENCE"
            ]
          },
          "colorByProperty": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsRealtimeSpatialMapPropertyOptions"
          },
          "colorByNumberOfRecordsColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsRealtimePerComputedPropertyStylingDTO"
          },
          "iconStyle": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsIconStyle"
          }
        },
        "description": "<p>The display options when showing REALTIME data on the spatial map.</p><p>Required when the <code>visualizationMode</code> is set to <code>REALTIME</code>. Ignored when another mode is used.</p>"
      },
      "PublicVisualAnalyticsRealtimePerComputedPropertyStylingDTO": {
        "required": [
          "additiveBlendingColorMap"
        ],
        "type": "object",
        "properties": {
          "additiveBlendingColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsFrontendAdditiveBlendingColorMapDTO"
          }
        },
        "description": "Defines the styling for the realtime specific visualizations"
      },
      "PublicVisualAnalyticsRealtimeSpatialMapPropertyOptions": {
        "required": [
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on the spatial map."
          }
        },
        "description": "<p>Determines which property is visualized on the spatial map when the mode is set to <code>COLOR_BY_PROPERTY</code>.</p><p>This option is required when the mode is set to <code>COLOR_BY_PROPERTY</code>.In all other cases, this property is optional and will be ignored when specified.</p>"
      },
      "PublicVisualAnalyticsSingleMapState": {
        "type": "object",
        "properties": {
          "temporalRangeFilter": {
            "$ref": "#/components/schemas/PublicTemporalRangeFilterDTO"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>Defines the timezone in which</p><ul><li>The times in the UI are displayed.</li><li>The hours of day / days of the week / months of the year filters are interpreted in when there is no specific timezone defined for that particular data set.For example if you specify to only include data on a Monday, the platform will interpret this as a Monday in the specified timezone.</li></ul><p>When not specified, UTC is used as timezone.</p>"
          },
          "timeLineProperties": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTimeLinePropertiesDTO"
          },
          "spatialMapProperties": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsSpatialMapPropertiesDTO"
          },
          "mapDataStyling": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsMapDataLayerStyleDTO"
            },
            "description": "<p>Mapping from the map data to the styling for the map data layer.</p><p>The key is the id of the map data, the value is the styling object.</p><p>Map data not included in this map will use default styling.</p>"
          },
          "dataSetProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsDataSetProperties"
            },
            "description": "<p>Mapping from the data set id to the styling and filtering options for the data set.</p><p>The key is the id of the data set, the value is the styling and filtering object.</p>"
          },
          "tableViewProperties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsTableProperties"
            },
            "description": "<p>Mapping from the data set id to the table view options for the data set.</p><p>The key is the id of the data set, the value is the table view options object.</p>"
          }
        },
        "description": "The state of a single map of the visual analytics page"
      },
      "PublicVisualAnalyticsSingleTimelineDefaultUISettings": {
        "type": "object",
        "properties": {
          "perPropertySettings": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "The UI settings specific to the properties on the timeline. The first item are the settings for the first property on the timeline, the second item are the settings for the second on the timeline, ... .",
            "items": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsSingleTimelinePerPropertyDefaultUISettings"
            }
          }
        },
        "description": "The default values for the UI settings of the timeline"
      },
      "PublicVisualAnalyticsSingleTimelinePerPropertyDefaultUISettings": {
        "type": "object",
        "properties": {
          "chartType": {
            "type": "string",
            "description": "The type of chart",
            "enum": [
              "BAR_CHART",
              "LINE_CHART"
            ]
          }
        },
        "description": "The UI settings specific to the properties on the timeline. The first item are the settings for the first property on the timeline, the second item are the settings for the second on the timeline, ... ."
      },
      "PublicVisualAnalyticsSingleTimelineProperty": {
        "required": [
          "dataSetId",
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "Determines what is shown on the timeline",
            "enum": [
              "DISPLAY_PROPERTY",
              "DISPLAY_NUMBER_OF_ASSETS"
            ]
          },
          "dataSetId": {
            "type": "string",
            "description": "The id of the dataset for which the data is being shown on the timeline"
          },
          "displayPropertyOptions": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTimeLineDisplayPropertyOptions"
          }
        },
        "description": "<p>Defines the property or properties that are shown on the timeline.</p>"
      },
      "PublicVisualAnalyticsSpatialMapPropertiesDTO": {
        "type": "object",
        "properties": {
          "bounds": {
            "$ref": "#/components/schemas/PublicSpatialBounds"
          },
          "showLegend": {
            "type": "boolean",
            "description": "<p>True when the legend is shown on the map, false when the legend is hidden.</p><p>When not specified, the legend will be shown.</p>"
          }
        },
        "description": "Defines the properties of the spatial map of the visual analytics page"
      },
      "PublicVisualAnalyticsTableColumnSortInfo": {
        "required": [
          "columnId",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "columnId": {
            "type": "string",
            "description": "The id of the column to sort on"
          },
          "sortOrder": {
            "type": "string",
            "description": "The order in which the column must be sorted",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          }
        },
        "description": "<p>Defines how the rows in the table must be sorted.</p><ul><li>When the collection is empty, a default order will be used.</li><li>When the collection contains a single item, the rows will be sorted based on their value for that column.</li><li>When the collection contains multiple items, the rows will first be sorted based on their value for the first specified column. If some rows have the same value for that first column, they will be sorted further on the value of the second specified column, ... .</li></ul><p>You can only sort on columns that are included in the table.</p><p>Note that, similar to the UI, this ordering only applies to the rows that are available to the table.For example when the data is sorted ascending on the 'speed' column, the first row in the table will have the lowest speed. It is however possible that there are assets in the data set with an even lower speed, but those assets were not included in the table.</p>"
      },
      "PublicVisualAnalyticsTableProperties": {
        "required": [
          "columns",
          "numberOfRowsPerPage",
          "sortInformation"
        ],
        "type": "object",
        "properties": {
          "columns": {
            "type": "array",
            "description": "The ids of the columns that should be included in the table (ordered).",
            "items": {
              "type": "string",
              "description": "The ids of the columns that should be included in the table (ordered)."
            }
          },
          "numberOfRowsPerPage": {
            "type": "integer",
            "description": "The number of rows the table should show on a single page",
            "format": "int32"
          },
          "sortInformation": {
            "type": "array",
            "description": "<p>Defines how the rows in the table must be sorted.</p><ul><li>When the collection is empty, a default order will be used.</li><li>When the collection contains a single item, the rows will be sorted based on their value for that column.</li><li>When the collection contains multiple items, the rows will first be sorted based on their value for the first specified column. If some rows have the same value for that first column, they will be sorted further on the value of the second specified column, ... .</li></ul><p>You can only sort on columns that are included in the table.</p><p>Note that, similar to the UI, this ordering only applies to the rows that are available to the table.For example when the data is sorted ascending on the 'speed' column, the first row in the table will have the lowest speed. It is however possible that there are assets in the data set with an even lower speed, but those assets were not included in the table.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsTableColumnSortInfo"
            }
          }
        },
        "description": "Defines the properties of the table view of the visual analytics page"
      },
      "PublicVisualAnalyticsTableViewWidgetProperties": {
        "required": [
          "dataSetId"
        ],
        "type": "object",
        "properties": {
          "dataSetId": {
            "type": "string",
            "description": "The id of the data set of the table view widget"
          }
        },
        "description": "<p>Defines the properties specific to a table widget.</p><p>This property must be provided when the <code>widgetType</code> is set to <code>TABLE_VIEW</code>.</p>"
      },
      "PublicVisualAnalyticsTimeLineDisplayPropertyOptions": {
        "required": [
          "aggregationMode",
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on the timeline."
          },
          "aggregationMode": {
            "type": "string",
            "description": "<p>The aggregation mode of the property that is currently displayed on the timeline.</p><p>This must be one of the supported modes for that property.When using an unsupported property, the behavior is undefined.</p>",
            "enum": [
              "HISTOGRAM_MIN",
              "HISTOGRAM_MAX",
              "HISTOGRAM_AVG"
            ]
          }
        },
        "description": "<p>Determines which property is shown on the timeline when the mode is set to <code>DISPLAY_PROPERTY</code>.</p><p>This option is required when the mode is set to <code>DISPLAY_PROPERTY</code>.In all other cases, this property is optional and will be ignored when specified.</p>"
      },
      "PublicVisualAnalyticsTimeLinePropertiesDTO": {
        "required": [
          "properties"
        ],
        "type": "object",
        "properties": {
          "properties": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the property or properties that are shown on the timeline.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicVisualAnalyticsSingleTimelineProperty"
            }
          },
          "minimumTimeXAxis": {
            "type": "integer",
            "description": "<p>The minimum time, specified in seconds since the epoch, that is visible on the X-axis of the timeline.</p><p>Note that this time is unrelated to the time (range) filter that is used when querying the data.It is a perfect valid use-case to focus the timeline on a time interval outside of that time (range) filter.</p>",
            "format": "int64"
          },
          "maximumTimeXAxis": {
            "type": "integer",
            "description": "<p>The maximum time, specified in seconds since the epoch, that is visible on the X-axis of the timeline.</p><p>Note that this time is unrelated to the time (range) filter that is used when querying the data.It is a perfect valid use-case to focus the timeline on a time interval outside of that time (range) filter.</p>",
            "format": "int64"
          },
          "defaultUISettings": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsSingleTimelineDefaultUISettings"
          }
        },
        "description": "Defines the properties of the timeline of the visual analytics page"
      },
      "PublicVisualAnalyticsTrajectoriesDisplayOptions": {
        "required": [
          "mode"
        ],
        "type": "object",
        "properties": {
          "mode": {
            "type": "string",
            "description": "<p>Determines what is shown on the spatial map.</p><p>The styling that will be used depends on the chosen mode:</p><ul><li><code>COLOR_BY_PROPERTY</code>: the styling is defined one level higher in the <code>perPropertyStyling</code> property.</li><li><code>COLOR_BY_NUMBER_OF_RECORDS</code>: the styling is defined in the <code>colorByNumberOfRecordsColorMap</code> property.</li><li><code>COLOR_BY_OCCURRENCE</code>: the styling is defined one level higher in the <code>singleHexColorStyle</code> property.</li></ul>",
            "enum": [
              "COLOR_BY_PROPERTY",
              "COLOR_BY_NUMBER_OF_RECORDS",
              "COLOR_BY_OCCURRENCE"
            ]
          },
          "colorByProperty": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTrajectoriesSpatialMapPropertyOptions"
          },
          "colorByNumberOfRecordsColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTrajectoriesPerComputedPropertyStylingDTO"
          },
          "iconLayerSettings": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTrajectoriesIconLayerSettings"
          }
        },
        "description": "<p>The display options when showing TRAJECTORIES data on the spatial map.</p><p>Required when the <code>visualizationMode</code> is set to <code>TRAJECTORIES</code>. Ignored when another mode is used.</p>"
      },
      "PublicVisualAnalyticsTrajectoriesIconLayerSettings": {
        "type": "object",
        "properties": {
          "visible": {
            "type": "boolean",
            "description": "When true, the trajectory icons will be visible."
          },
          "iconStyle": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsIconStyle"
          }
        },
        "description": "<p>The settings of the trajectory icon layer, which shows the position of the asset at the end of the time filter interval.</p><p>When not specified, the trajectory icon layer will not be shown.</p>"
      },
      "PublicVisualAnalyticsTrajectoriesPerComputedPropertyStylingDTO": {
        "required": [
          "additiveBlendingColorMap"
        ],
        "type": "object",
        "properties": {
          "additiveBlendingColorMap": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsFrontendAdditiveBlendingColorMapDTO"
          }
        },
        "description": "Defines the styling for the trajectories specific visualizations"
      },
      "PublicVisualAnalyticsTrajectoriesSpatialMapPropertyOptions": {
        "required": [
          "propertyId"
        ],
        "type": "object",
        "properties": {
          "propertyId": {
            "type": "string",
            "description": "The id of the property that is currently displayed on the spatial map."
          }
        },
        "description": "<p>Determines which property is visualized on the spatial map when the mode is set to <code>COLOR_BY_PROPERTY</code>.</p><p>This option is required when the mode is set to <code>COLOR_BY_PROPERTY</code>.In all other cases, this property is optional and will be ignored when specified.</p>"
      },
      "PublicVisualAnalyticsWidgetProperties": {
        "required": [
          "mapIndex",
          "widgetType"
        ],
        "type": "object",
        "properties": {
          "widgetType": {
            "type": "string",
            "description": "The type of widget to create",
            "enum": [
              "SPATIAL_MAP",
              "TIMELINE",
              "TABLE_VIEW",
              "DISTRIBUTION"
            ]
          },
          "mapIndex": {
            "maximum": 1,
            "minimum": 0,
            "type": "integer",
            "description": "<p>The index of the map for which the widget should be created.</p><ul><li>When the visual analytics page contains only a single map, the value should be 0.</li><li>When the visual analytics page contains two maps, the value should be either 0 or 1.</li></ul>",
            "format": "int32"
          },
          "distributionWidgetProperties": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsDistributionWidgetProperties"
          },
          "tableViewWidgetProperties": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsTableViewWidgetProperties"
          }
        },
        "description": "The properties specific to a Visual Analytics widget"
      },
      "PublicWidgetDTO": {
        "required": [
          "description",
          "id",
          "projectId",
          "title",
          "widgetGroupId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the widget"
          },
          "widgetGroupId": {
            "type": "string",
            "description": "The id of the widget group to which the widget belongs"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project to which the widget belongs"
          },
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          }
        }
      },
      "CreatePublicTrendAnalyticsWidgetRequest": {
        "required": [
          "properties",
          "state",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "state": {
            "$ref": "#/components/schemas/PublicTrendAnalyticsPageState"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicTrendAnalyticsWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicCommonAnalyticsLocalAreaPropertiesDTO": {
        "required": [
          "areaIdentifier"
        ],
        "type": "object",
        "properties": {
          "areaIdentifier": {
            "type": "string",
            "description": "The identifier of the local area"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>The time zone used to display the results of the area.</p><p>When not specified, the global time zone is used.</p>"
          }
        },
        "description": "Defines the local areas for which trend analytics must be calculated"
      },
      "PublicTrendAnalyticsPageState": {
        "required": [
          "activeDataSetId",
          "mode"
        ],
        "type": "object",
        "properties": {
          "activeDataSetId": {
            "type": "string",
            "description": "The id of the active data set"
          },
          "mode": {
            "type": "string",
            "description": "Determines what is shown on the trend diagrams",
            "enum": [
              "DISPLAY_PROPERTY",
              "DISPLAY_NUMBER_OF_ASSETS"
            ]
          },
          "chartType": {
            "type": "string",
            "description": "The chart type",
            "enum": [
              "BAR_CHART",
              "LINE_CHART"
            ]
          },
          "displayPropertyOptions": {
            "$ref": "#/components/schemas/PublicTrendAnalyticsDisplayPropertyOptions"
          },
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "globalTimeZoneIdentifier": {
            "type": "string",
            "description": "<p>The time zone of the global trend analytics.</p><p>When not specified, UTC is used as timezone.</p>"
          },
          "localAreas": {
            "type": "array",
            "description": "Defines the local areas for which trend analytics must be calculated",
            "items": {
              "$ref": "#/components/schemas/PublicCommonAnalyticsLocalAreaPropertiesDTO"
            }
          },
          "timeRanges": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the time ranges.</p><ul><li>When not specified, a default time range will be used.</li><li>When a single time range is specified, the trend analytics will show trends for this range.</li><li>When specifying two ranges, the trend analytics will show a comparison between those two ranges.</li></ul>",
            "items": {
              "$ref": "#/components/schemas/PublicTemporalRangeFilterDTO"
            }
          },
          "groupingMode": {
            "type": "string",
            "description": "<p>Defines how the results are grouped when displaying them in the trend analytics.</p><p>When not specified, no grouping will be used</p>",
            "enum": [
              "GROUP_BY_HOUR",
              "GROUP_BY_DAY",
              "NO_GROUPING"
            ]
          }
        },
        "description": "The state of the trend analytics page"
      },
      "PublicTrendAnalyticsWidgetProperties": {
        "required": [
          "widgetType"
        ],
        "type": "object",
        "properties": {
          "widgetType": {
            "type": "string",
            "description": "The type of widget to create",
            "enum": [
              "GLOBAL_TREND_ANALYTICS",
              "LOCAL_TREND_ANALYTICS"
            ]
          },
          "localAreaIdentifier": {
            "type": "string",
            "description": "<p>The identifier of the local area.</p><p>Required when the <code>widgetType</code> is set to <code>LOCAL_TREND_ANALYTICS</code>, and will be ignored for other widget types.</p>"
          }
        },
        "description": "The properties specific to the trend analytics widget"
      },
      "CreatePublicOriginDestinationWidgetRequest": {
        "required": [
          "properties",
          "state",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "state": {
            "$ref": "#/components/schemas/PublicOriginDestinationPageState"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicOriginDestinationWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicOriginDestinationAreaPropertiesDTO": {
        "required": [
          "areaIdentifier"
        ],
        "type": "object",
        "properties": {
          "areaIdentifier": {
            "type": "string",
            "description": "The identifier of the area"
          }
        },
        "description": "Defines the areas to include in the origin destination matrices"
      },
      "PublicOriginDestinationPageState": {
        "required": [
          "activeDataSetId",
          "areas"
        ],
        "type": "object",
        "properties": {
          "activeDataSetId": {
            "type": "string",
            "description": "The id of the active data set"
          },
          "mode": {
            "type": "string",
            "description": "Determines what is shown on the origin-destination matrices",
            "enum": [
              "NUMBER_OF_TRIPS",
              "PERCENTAGE_OF_TRIPS_SAME_ORIGIN",
              "PERCENTAGE_OF_TRIPS_SAME_DESTINATION",
              "AVERAGE_TRAVEL_TIME"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>The time zone in which the results are displayed.</p><p>When not specified, UTC is used as timezone.</p>"
          },
          "areas": {
            "type": "array",
            "description": "Defines the areas to include in the origin destination matrices",
            "items": {
              "$ref": "#/components/schemas/PublicOriginDestinationAreaPropertiesDTO"
            }
          },
          "timeRanges": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the time ranges.</p><ul><li>When not specified, a default time range will be used.</li><li>When a single time range is specified, a single origin destination will be shown for the specified range.</li><li>When specifying two ranges, the origin destination matrices for both ranges will be shown, as well as a comparison matrix.</li></ul>",
            "items": {
              "$ref": "#/components/schemas/PublicTemporalRangeFilterDTO"
            }
          }
        },
        "description": "The state of the origin destination page"
      },
      "PublicOriginDestinationWidgetProperties": {
        "type": "object",
        "properties": {
          "widgetType": {
            "type": "string",
            "description": "<p>The type of widget to create.</p><p>When using <code>SECOND_MATRIX</code> or <code>COMPARISON_MATRIX</code>, you need to define 2 <code>timeRanges</code> in the page state.</p>",
            "enum": [
              "FIRST_MATRIX",
              "SECOND_MATRIX",
              "COMPARISON_MATRIX"
            ]
          }
        },
        "description": "The properties specific to the origin destination widget"
      },
      "CreatePublicDwellTimeWidgetRequest": {
        "required": [
          "properties",
          "state",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "state": {
            "$ref": "#/components/schemas/PublicDwellTimePageState"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDwellTimeWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicDwellTimeAreaPropertiesDTO": {
        "required": [
          "areaIdentifier"
        ],
        "type": "object",
        "properties": {
          "areaIdentifier": {
            "type": "string",
            "description": "The identifier of the area"
          }
        },
        "description": "Defines the areas to include in the dwell time analysis"
      },
      "PublicDwellTimePageState": {
        "required": [
          "activeDataSetId",
          "areas"
        ],
        "type": "object",
        "properties": {
          "activeDataSetId": {
            "type": "string",
            "description": "The id of the active data set"
          },
          "type": {
            "type": "string",
            "description": "Determines the type of dwell time analysis, average, or individual",
            "enum": [
              "INDIVIDUAL",
              "AVERAGE"
            ]
          },
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "timeZoneIdentifier": {
            "type": "string",
            "description": "<p>The time zone in which the results are displayed.</p><p>When not specified, UTC is used as timezone.</p>"
          },
          "areas": {
            "type": "array",
            "description": "Defines the areas to include in the dwell time analysis",
            "items": {
              "$ref": "#/components/schemas/PublicDwellTimeAreaPropertiesDTO"
            }
          },
          "timeRanges": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the time ranges.</p><ul><li>When not specified, a default time range will be used.</li><li>When a single time range is specified, a single dwell time analysis will be shown for the specified range.</li><li>When specifying two ranges, the dwell times for both ranges will be shown, as well as a difference.</li></ul>",
            "items": {
              "$ref": "#/components/schemas/PublicTemporalRangeFilterDTO"
            }
          },
          "individualDwellTimeTableProperties": {
            "$ref": "#/components/schemas/PublicIndividualDwellTimeTablePropertiesDTO"
          },
          "individualDwellTimeSequenceDiagramProperties": {
            "$ref": "#/components/schemas/PublicIndividualDwellTimeSequenceDiagramPropertiesDTO"
          }
        },
        "description": "The state of the dwell time page"
      },
      "PublicDwellTimeWidgetProperties": {
        "type": "object",
        "properties": {
          "widgetType": {
            "type": "string",
            "description": "The type of widget to create",
            "enum": [
              "AVERAGE_DWELL_TIMES",
              "AVERAGE_DWELL_TIMES_TREND",
              "INDIVIDUAL_DWELL_TIMES_TABLE",
              "INDIVIDUAL_DWELL_TIMES_SEQUENCE_DIAGRAM"
            ]
          }
        },
        "description": "The properties specific to the dwell time widget"
      },
      "PublicIndividualDwellTimeSequenceDiagramPropertiesDTO": {
        "required": [
          "numberOfRowsPerPage"
        ],
        "type": "object",
        "properties": {
          "numberOfRowsPerPage": {
            "type": "integer",
            "description": "The number of rows the sequence diagram should show on a single page",
            "format": "int32"
          }
        },
        "description": "Defines the properties of the sequence diagram for the individual dwell time analytics"
      },
      "PublicIndividualDwellTimeTableColumnSortInfo": {
        "required": [
          "columnId",
          "sortOrder"
        ],
        "type": "object",
        "properties": {
          "columnId": {
            "type": "string",
            "description": "The id of the column to sort on",
            "enum": [
              "AREA_NAME",
              "ASSET_ID",
              "ENTER_COUNT",
              "FIRST_TIME_INSIDE",
              "LAST_TIME_INSIDE",
              "DWELL_TIME",
              "CUMULATIVE_DWELL_TIME"
            ]
          },
          "sortOrder": {
            "type": "string",
            "description": "The order in which the column must be sorted",
            "enum": [
              "ASCENDING",
              "DESCENDING"
            ]
          }
        },
        "description": "<p>Defines how the rows in the table must be sorted.</p><ul><li>When the collection is empty, a default order will be used.</li><li>When the collection contains a single item, the rows will be sorted based on their value for that column.</li><li>When the collection contains multiple items, the rows will first be sorted based on their value for the first specified column. If some rows have the same value for that first column, they will be sorted further on the value of the second specified column, ... .</li></ul><p>You can only sort on columns that are included in the table.</p><p>Note that, similar to the UI, this ordering only applies to the rows that are available to the table.For example when the data is sorted ascending on the 'speed' column, the first row in the table will have the lowest speed. It is however possible that there are assets in the data set with an even lower speed, but those assets were not included in the table.</p>"
      },
      "PublicIndividualDwellTimeTablePropertiesDTO": {
        "required": [
          "numberOfRowsPerPage",
          "sortInformation"
        ],
        "type": "object",
        "properties": {
          "numberOfRowsPerPage": {
            "type": "integer",
            "description": "The number of rows the table should show on a single page",
            "format": "int32"
          },
          "sortInformation": {
            "type": "array",
            "description": "<p>Defines how the rows in the table must be sorted.</p><ul><li>When the collection is empty, a default order will be used.</li><li>When the collection contains a single item, the rows will be sorted based on their value for that column.</li><li>When the collection contains multiple items, the rows will first be sorted based on their value for the first specified column. If some rows have the same value for that first column, they will be sorted further on the value of the second specified column, ... .</li></ul><p>You can only sort on columns that are included in the table.</p><p>Note that, similar to the UI, this ordering only applies to the rows that are available to the table.For example when the data is sorted ascending on the 'speed' column, the first row in the table will have the lowest speed. It is however possible that there are assets in the data set with an even lower speed, but those assets were not included in the table.</p>",
            "items": {
              "$ref": "#/components/schemas/PublicIndividualDwellTimeTableColumnSortInfo"
            }
          }
        },
        "description": "Defines the properties of the table for the individual dwell time analytics"
      },
      "CreatePublicDocumentationWidgetRequest": {
        "required": [
          "properties",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDocumentationWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicDocumentationWidgetProperties": {
        "required": [
          "contents"
        ],
        "type": "object",
        "properties": {
          "contents": {
            "type": "string",
            "description": "<p>The contents of the widget.</p><p>Typically this is a string with HTML tags to style the contents, include images, ... .</p>"
          }
        },
        "description": "The properties specific to a documentation widget"
      },
      "CreatePublicDistributionAnalyticsWidgetRequest": {
        "required": [
          "properties",
          "state",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the widget, shown above the widget on the dashboard"
          },
          "description": {
            "type": "string",
            "description": "The description of the widget, can be the empty string. The description is shown below the widget on the dashboard"
          },
          "state": {
            "$ref": "#/components/schemas/PublicDistributionAnalyticsPageState"
          },
          "properties": {
            "$ref": "#/components/schemas/PublicDistributionAnalyticsWidgetProperties"
          },
          "width": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The width of the widget.</p><p>Must be a value between 1 (smallest) and 12 (widest).</p><p>When not specified, a default width will be chosen based on the type of the widget.</p>",
            "format": "int32"
          },
          "height": {
            "maximum": 12,
            "minimum": 1,
            "type": "integer",
            "description": "<p>The height of the widget.</p><p>Must be a value between 1 (lowest) and 12 (highest).</p><p>When not specified, a default height will be chosen based on the type of the widget.</p>",
            "format": "int32"
          }
        }
      },
      "PublicDistributionAnalyticsPageState": {
        "required": [
          "activeDataSetId",
          "displayPropertyOptions"
        ],
        "type": "object",
        "properties": {
          "activeDataSetId": {
            "type": "string",
            "description": "The id of the active data set"
          },
          "displayPropertyOptions": {
            "$ref": "#/components/schemas/PublicDistributionAnalyticsDisplayPropertyOptions"
          },
          "filter": {
            "$ref": "#/components/schemas/PublicAnalyticsFilterDTO"
          },
          "globalTimeZoneIdentifier": {
            "type": "string",
            "description": "<p>The time zone of the global distribution analytics.</p><p>When not specified, UTC is used as timezone.</p>"
          },
          "localAreas": {
            "type": "array",
            "description": "Defines the local areas for which distribution analytics must be calculated",
            "items": {
              "$ref": "#/components/schemas/PublicCommonAnalyticsLocalAreaPropertiesDTO"
            }
          },
          "timeRanges": {
            "maxItems": 2,
            "minItems": 1,
            "type": "array",
            "description": "<p>Defines the time ranges.</p><ul><li>When not specified, a default time range will be used.</li><li>When a single time range is specified, the distribution analytics will show distributions for this range.</li><li>When specifying two ranges, the distribution analytics will show a comparison between those two ranges.</li></ul>",
            "items": {
              "$ref": "#/components/schemas/PublicTemporalRangeFilterDTO"
            }
          }
        },
        "description": "The state of the distribution analytics page"
      },
      "PublicDistributionAnalyticsWidgetProperties": {
        "required": [
          "widgetType"
        ],
        "type": "object",
        "properties": {
          "widgetType": {
            "type": "string",
            "description": "The type of widget to create",
            "enum": [
              "GLOBAL_DISTRIBUTION_ANALYTICS",
              "LOCAL_DISTRIBUTION_ANALYTICS"
            ]
          },
          "localAreaIdentifier": {
            "type": "string",
            "description": "<p>The identifier of the local area.</p><p>Required when the <code>widgetType</code> is set to <code>LOCAL_TREND_ANALYTICS</code>, and will be ignored for other widget types.</p>"
          }
        },
        "description": "The properties specific to the distribution analytics widget"
      },
      "CreatePublicWidgetGroupRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the widget group, which will be shown on the dashboard"
          }
        }
      },
      "PublicWidgetGroupDTO": {
        "required": [
          "id",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of this widget group"
          },
          "projectId": {
            "type": "string",
            "description": "The id of the project for which the widget is created"
          },
          "name": {
            "type": "string",
            "description": "The name of this group, which is shown on the dashboard"
          }
        }
      },
      "CreatePublicBookmarkLinkRequest": {
        "required": [
          "name",
          "page"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the link"
          },
          "page": {
            "type": "string",
            "description": "The page you want to give access to through the link",
            "enum": [
              "VISUAL_ANALYTICS_PAGE",
              "TREND_ANALYTICS_PAGE",
              "DISTRIBUTION_ANALYTICS_PAGE",
              "ORIGIN_DESTINATION_PAGE",
              "DWELL_TIME_PAGE",
              "DASHBOARD_PAGE"
            ]
          },
          "theme": {
            "type": "string",
            "description": "The theme that should be used when somebody accesses the link",
            "enum": [
              "Light",
              "Dark"
            ]
          },
          "dashboardProperties": {
            "$ref": "#/components/schemas/PublicBookmarkLinkDashboardProperties"
          }
        }
      },
      "PublicBookmarkLinkDashboardProperties": {
        "type": "object",
        "properties": {
          "allowNavigationToIndividualAnalyticsPages": {
            "type": "boolean",
            "description": "<p>Specifies whether the visitor of the linked dashboard can click on the widgets to navigate to the individual analytics pages.</p><p>Default value is <code>true</code>.</p>"
          }
        },
        "description": "<p>The additional properties when creating a link for the dashboard page.</p><p>When not specified, default values will be used for each of those properties. Consult the documentation of those individual properties for those default values.</p>"
      },
      "PublicBookmarkLinkDTO": {
        "required": [
          "id",
          "link",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the link"
          },
          "name": {
            "type": "string",
            "description": "The name of the link"
          },
          "link": {
            "type": "string",
            "description": "The url of the link"
          }
        }
      },
      "CreatePublicBookmarkRequest": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the bookmark"
          },
          "description": {
            "type": "string",
            "description": "The description if the bookmark"
          },
          "defaultBookmark": {
            "type": "boolean",
            "description": "<p>True when the bookmark should become the default one for the project.</p><p>Note that each project can have at most one default bookmark.When this value is true, this bookmark will become the default one, even if another bookmark was previously marked as the default one.</p>"
          },
          "visualAnalyticsPageState": {
            "$ref": "#/components/schemas/PublicVisualAnalyticsPageState"
          },
          "trendAnalyticsPageState": {
            "$ref": "#/components/schemas/PublicTrendAnalyticsPageState"
          },
          "distributionAnalyticsPageState": {
            "$ref": "#/components/schemas/PublicDistributionAnalyticsPageState"
          },
          "originDestinationPageState": {
            "$ref": "#/components/schemas/PublicOriginDestinationPageState"
          },
          "dwellTimePageState": {
            "$ref": "#/components/schemas/PublicDwellTimePageState"
          }
        }
      },
      "PublicBookmarkDTO": {
        "required": [
          "description",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the bookmark"
          },
          "name": {
            "type": "string",
            "description": "The name of the bookmark"
          },
          "description": {
            "type": "string",
            "description": "The description of the bookmark"
          }
        }
      },
      "CreatePublicProjectRequest": {
        "required": [
          "description",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name of the project"
          },
          "description": {
            "type": "string",
            "description": "The description of the project, can be the empty string."
          }
        }
      },
      "PublicProjectDTO": {
        "required": [
          "description",
          "id",
          "name",
          "owned"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the project"
          },
          "name": {
            "type": "string",
            "description": "The human readable name of the project"
          },
          "description": {
            "type": "string",
            "description": "The description of the project"
          },
          "owned": {
            "type": "boolean",
            "description": "Indicates whether you are the owner of this resource. When the resource is not owned by you, some operations on it will not work."
          }
        }
      },
      "CreatePublicWMSMapDataRequest": {
        "required": [
          "layers",
          "server"
        ],
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "description": "The URL of the the WMS server"
          },
          "layers": {
            "type": "array",
            "description": "A list of all the WMS layer ids",
            "items": {
              "type": "string",
              "description": "A list of all the WMS layer ids"
            }
          }
        }
      },
      "PublicMapDataDTO": {
        "required": [
          "description",
          "id",
          "name",
          "owned",
          "source",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the mapdata"
          },
          "name": {
            "type": "string",
            "description": "The human readable name of the mapdata"
          },
          "description": {
            "type": "string",
            "description": "The description of the mapdata"
          },
          "source": {
            "type": "string",
            "description": "The source of the mapdata",
            "enum": [
              "FILE",
              "MAPBOX",
              "WMS"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of mapdata",
            "enum": [
              "BACKGROUND",
              "AREAOFINTEREST"
            ]
          },
          "owned": {
            "type": "boolean",
            "description": "Indicates whether you are the owner of this resource. When the resource is not owned by you, some operations on it will not work."
          }
        }
      },
      "CreatePublicMapboxMapDataRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of Mapbox layer you want to create",
            "enum": [
              "STREETS",
              "LIGHT",
              "DARK",
              "SATELLITE",
              "SATELLITE_LABELS"
            ]
          }
        }
      },
      "CreatePublicGeoJSONMapDataRequest": {
        "required": [
          "areaDisplayNameProperty",
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name is used in the UI when we need to refer to this layer"
          },
          "description": {
            "type": "string",
            "description": "The description is shown on the overview page with all the background or area of interest layers. You can use an empty string."
          },
          "areaDisplayNameProperty": {
            "type": "string",
            "description": "The property in the GeoJSON data used to label the data when shown on the map or in the UI when you need to select an area by name."
          },
          "distanceThreshold": {
            "type": "number",
            "description": "<p>The distance threshold allows to increase the size of shapes for points and polygons. It is expressed in meters. For example with a non-zero value, points will be converted to circles.</p><p>This property is only relevant when the <code>type</code> is <code>AREAOFINTEREST</code>.</p>",
            "format": "double"
          },
          "styleProperty": {
            "type": "string",
            "description": "<p>The property in the GeoJSON data that contains the style information for the layer. Only specify this property when the data contains style information.</p><p>This property is only relevant when the <code>type</code> is <code>BACKGROUND</code>.</p>"
          },
          "type": {
            "type": "string",
            "description": "Defines whether the GeoJSON mapdata must be created as background layer or as area of interest layer.",
            "enum": [
              "BACKGROUND",
              "AREAOFINTEREST"
            ]
          }
        },
        "description": "The request describing the GeoJSON layer under construction"
      },
      "CreatePublicDataSetRequest": {
        "required": [
          "description",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The human readable name of the data set"
          },
          "description": {
            "type": "string",
            "description": "The description of the data set, can be the empty string."
          },
          "type": {
            "type": "string",
            "description": "The type of the data set",
            "enum": [
              "MOVEMENT_DATA",
              "TIME_SERIES_DATA",
              "STATIC_GEOJSON"
            ]
          },
          "assetsName": {
            "type": "string",
            "description": "Describes what is moving (for example ships, cars, people, ...) for movement datasets or what your shapes represent (devices, sensors, areas, countries, ...) for time series data sets"
          },
          "movementDataSetProcessingSettings": {
            "$ref": "#/components/schemas/CreatePublicMovementDataSetRequestProcessingSettings"
          }
        }
      },
      "CreatePublicMovementDataSetRequestProcessingSettings": {
        "required": [
          "generateRealtimeDataRepresentation",
          "generateTrajectoriesDataRepresentation",
          "spatialResolutionInMeters",
          "temporalResolutionInSeconds"
        ],
        "type": "object",
        "properties": {
          "generateRealtimeDataRepresentation": {
            "type": "boolean",
            "description": "True when the realtime data representation should be generated as well."
          },
          "generateTrajectoriesDataRepresentation": {
            "type": "boolean",
            "description": "True when the trajectories data representation should be generated as well."
          },
          "spatialResolutionInMeters": {
            "type": "number",
            "description": "The spatial resolution, expressed in meters. Must be a positive number.",
            "format": "double",
            "example": 25
          },
          "temporalResolutionInSeconds": {
            "type": "integer",
            "description": "The temporal resolution, expressed in seconds. Must be a positive number.",
            "format": "int32",
            "example": 30
          },
          "trajectoriesDistanceThresholdInMeters": {
            "type": "number",
            "description": "The trajectories distance threshold, expressed in meters. Must be a positive number.",
            "format": "double",
            "example": 1000
          },
          "trajectoriesDurationThresholdInSeconds": {
            "type": "number",
            "description": "The trajectories duration threshold, expressed in seconds. Must be a positive number.",
            "format": "double",
            "example": 3600
          }
        },
        "description": "<p>The processing settings for a movement data set.</p><p>When you're creating a time series data set, this property will be ignored.</p><p>When you're creating a movement data set and you don't specify this property, default settings will be used.</p>"
      },
      "PublicDataSetDTO": {
        "required": [
          "batches",
          "description",
          "id",
          "maximumTime",
          "minimumTime",
          "name",
          "owned",
          "spatialBounds",
          "state",
          "type",
          "visualizationModes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique identifier of the data set"
          },
          "name": {
            "type": "string",
            "description": "The human readable name of the data set"
          },
          "description": {
            "type": "string",
            "description": "The description of the data set"
          },
          "batches": {
            "type": "array",
            "description": "The list of batches that are currently present in this data set",
            "items": {
              "type": "string",
              "description": "The list of batches that are currently present in this data set"
            }
          },
          "minimumTime": {
            "type": "integer",
            "description": "The minimum time of the time range of the dataset, expressed as seconds since the epoch",
            "format": "int64"
          },
          "maximumTime": {
            "type": "integer",
            "description": "The maximum time of the time range of the dataset, expressed as seconds since the epoch",
            "format": "int64"
          },
          "spatialBounds": {
            "$ref": "#/components/schemas/PublicDataSetSpatialBoundsDTO"
          },
          "visualizationModes": {
            "type": "array",
            "description": "The supported visualization modes for the dataset",
            "items": {
              "type": "string",
              "description": "The supported visualization modes for the dataset",
              "enum": [
                "GRIDDED",
                "TRAJECTORIES",
                "REALTIME"
              ]
            }
          },
          "owned": {
            "type": "boolean",
            "description": "Indicates whether you are the owner of this resource. When the resource is not owned by you, some operations on it will not work."
          },
          "state": {
            "type": "string",
            "description": "<p>The state of the data set</p><ul><li><code>IDLE</code>: all available data for this data set has been processed.</li><li><code>PROCESSING</code>: data is currently being processed.</li><li><code>QUEUED</code>: there is data uploaded for this data set that is waiting to be processed, but the processing job isn't running yet.</li></ul>",
            "enum": [
              "IDLE",
              "PROCESSING",
              "QUEUED"
            ]
          },
          "type": {
            "type": "string",
            "description": "The type of the dataset",
            "enum": [
              "MOVEMENT_DATA",
              "TIME_SERIES_DATA",
              "STATIC_GEOJSON"
            ]
          }
        }
      },
      "PublicDataSetSpatialBoundsDTO": {
        "required": [
          "height",
          "latitude",
          "longitude",
          "width"
        ],
        "type": "object",
        "properties": {
          "longitude": {
            "type": "number",
            "description": "The longitude in degrees of the lower-left corner of the spatial bounds of the data set, expressed in the WGS-84 reference system",
            "format": "double"
          },
          "latitude": {
            "type": "number",
            "description": "The latitude in degrees of the lower-left corner of the spatial bounds of the data set, expressed in the WGS-84 reference system",
            "format": "double"
          },
          "width": {
            "type": "number",
            "description": "The width in degrees of the spatial bounds of the data set",
            "format": "double"
          },
          "height": {
            "type": "number",
            "description": "The height in degrees of the spatial bounds of the data set",
            "format": "double"
          }
        },
        "description": "The spatial bounds of the data set"
      },
      "PublicVisualAnalyticsTimeLinePropertyDTO": {
        "required": [
          "aggregationModes",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property. This id must be used to refer to this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property, which is used in the UI."
          },
          "aggregationModes": {
            "type": "array",
            "description": "Contains the supported aggregation modes for the records",
            "items": {
              "type": "string",
              "description": "Contains the supported aggregation modes for the records",
              "enum": [
                "HISTOGRAM_MIN",
                "HISTOGRAM_MAX",
                "HISTOGRAM_AVG"
              ]
            }
          }
        }
      },
      "PublicVisualAnalyticsTableViewColumnDTO": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the column. This id must be used to refer to this column."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the column, which is shown to the user"
          }
        }
      },
      "PublicVisualAnalyticsSpatialMapPropertyDTO": {
        "required": [
          "displayName",
          "griddedAggregationModes",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property. This id must be used to refer to this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property, which is used in the UI."
          },
          "griddedAggregationModes": {
            "type": "array",
            "description": "Contains the supported aggregation modes for the records when using the <code>GRIDDED</code> visualization mode",
            "items": {
              "type": "string",
              "description": "Contains the supported aggregation modes for the records when using the <code>GRIDDED</code> visualization mode",
              "enum": [
                "SPATIAL_MAP_MODE",
                "SPATIAL_MAP_MIN",
                "SPATIAL_MAP_MAX",
                "SPATIAL_MAP_AVG"
              ]
            }
          }
        }
      },
      "PublicVisualAnalyticsDistributionPropertyDTO": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property. This id must be used to refer to this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property, which is used in the UI."
          }
        }
      },
      "PublicTrendAnalyticsHistogramPropertyDTO": {
        "required": [
          "aggregationModes",
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property. This id must be used to refer to this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property, which is used in the UI."
          },
          "aggregationModes": {
            "type": "array",
            "description": "Contains the supported aggregation modes for the records",
            "items": {
              "type": "string",
              "description": "Contains the supported aggregation modes for the records",
              "enum": [
                "HISTOGRAM_MIN",
                "HISTOGRAM_MAX",
                "HISTOGRAM_AVG"
              ]
            }
          }
        }
      },
      "PublicPropertyIdentifierDTO": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id for this property. It is this id that should be used when you want to refer to his property in a filter"
          },
          "displayName": {
            "type": "string",
            "description": "The display name for this property. This is the name that is visible to the user of the web interface."
          }
        }
      },
      "PublicAreaIdentifierDTO": {
        "required": [
          "displayName",
          "id",
          "source"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id for this area. It is this id that should be used when you want to refer to this area in a filter."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of this area. This is the name that is visible to the user of the web interface."
          },
          "source": {
            "type": "string",
            "description": "The source of this area. This can either be an area of interest mapdata resource, or an area defined in a GeoJSON file of a time series data set",
            "enum": [
              "FROM_AREA_OF_INTEREST_MAPDATA",
              "FROM_TIME_SERIES_DATA_SET"
            ]
          }
        }
      },
      "PublicDistributionAnalyticsDistributionPropertyDTO": {
        "required": [
          "displayName",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the property. This id must be used to refer to this property."
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the property, which is used in the UI."
          }
        }
      }
    },
    "securitySchemes": {
      "jwtToken": {
        "type": "http",
        "description": "<p>In order to use the REST API, you need to provide a JWT token in the header.</p><p>The token should be added to the <code>Authorization</code> header of all requests prefixed with <code>Bearer </code>.</p><p>For example if the JWT token is <code>12345</code>, the <code>Authorization</code> header would become:</p><pre>Bearer 12345</pre>",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}