"use strict";
/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectResourcesWidgetsApi = exports.ProjectResourcesWidgetsApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://api.platform-xyzt.ai';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ProjectResourcesWidgetsApiApiKeys;
(function (ProjectResourcesWidgetsApiApiKeys) {
})(ProjectResourcesWidgetsApiApiKeys = exports.ProjectResourcesWidgetsApiApiKeys || (exports.ProjectResourcesWidgetsApiApiKeys = {}));
class ProjectResourcesWidgetsApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'jwtToken': new models_2.HttpBearerAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProjectResourcesWidgetsApiApiKeys[key]].apiKey = value;
    }
    set accessToken(accessToken) {
        this.authentications.jwtToken.accessToken = accessToken;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * <p>Creates a new distribution analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new distribution analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDistributionAnalyticsWidgetRequest Request body describing the distribution analytics widget under construction
     */
    createDistributionAnalyticsWidget(projectId, widgetGroupId, createPublicDistributionAnalyticsWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/distributionanalyticwidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createDistributionAnalyticsWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createDistributionAnalyticsWidget.');
            }
            // verify required parameter 'createPublicDistributionAnalyticsWidgetRequest' is not null or undefined
            if (createPublicDistributionAnalyticsWidgetRequest === null || createPublicDistributionAnalyticsWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicDistributionAnalyticsWidgetRequest was null or undefined when calling createDistributionAnalyticsWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicDistributionAnalyticsWidgetRequest, "CreatePublicDistributionAnalyticsWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new dwell time widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new dwell time widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDwellTimeWidgetRequest Request body describing the dwell time widget under construction
     */
    createDwellTimeWidget(projectId, widgetGroupId, createPublicDwellTimeWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/dwelltimewidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createDwellTimeWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createDwellTimeWidget.');
            }
            // verify required parameter 'createPublicDwellTimeWidgetRequest' is not null or undefined
            if (createPublicDwellTimeWidgetRequest === null || createPublicDwellTimeWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicDwellTimeWidgetRequest was null or undefined when calling createDwellTimeWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicDwellTimeWidgetRequest, "CreatePublicDwellTimeWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new documentation widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new documentation widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicDocumentationWidgetRequest Request body describing the documentation widget under construction
     */
    createInformationWidget(projectId, widgetGroupId, createPublicDocumentationWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/documentationwidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createInformationWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createInformationWidget.');
            }
            // verify required parameter 'createPublicDocumentationWidgetRequest' is not null or undefined
            if (createPublicDocumentationWidgetRequest === null || createPublicDocumentationWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicDocumentationWidgetRequest was null or undefined when calling createInformationWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicDocumentationWidgetRequest, "CreatePublicDocumentationWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new origin destination widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new origin destination widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicOriginDestinationWidgetRequest Request body describing the origin destination widget under construction
     */
    createOriginDestinationWidget(projectId, widgetGroupId, createPublicOriginDestinationWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/origindestinationwidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createOriginDestinationWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createOriginDestinationWidget.');
            }
            // verify required parameter 'createPublicOriginDestinationWidgetRequest' is not null or undefined
            if (createPublicOriginDestinationWidgetRequest === null || createPublicOriginDestinationWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicOriginDestinationWidgetRequest was null or undefined when calling createOriginDestinationWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicOriginDestinationWidgetRequest, "CreatePublicOriginDestinationWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new trend analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new trend analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicTrendAnalyticsWidgetRequest Request body describing the trend analytics widget under construction
     */
    createTrendAnalyticsWidget(projectId, widgetGroupId, createPublicTrendAnalyticsWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/trendanalyticwidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createTrendAnalyticsWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createTrendAnalyticsWidget.');
            }
            // verify required parameter 'createPublicTrendAnalyticsWidgetRequest' is not null or undefined
            if (createPublicTrendAnalyticsWidgetRequest === null || createPublicTrendAnalyticsWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicTrendAnalyticsWidgetRequest was null or undefined when calling createTrendAnalyticsWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicTrendAnalyticsWidgetRequest, "CreatePublicTrendAnalyticsWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new visual analytics widget.</p><p>The created widget resource is returned.</p>
     * @summary Create a new visual analytics widget
     * @param projectId The id of the project to create the widget for
     * @param widgetGroupId The id of the widget group to which the widget belongs
     * @param createPublicVisualAnalyticsWidgetRequest Request body describing the visual analytics widget under construction
     */
    createVisualAnalyticsWidget(projectId, widgetGroupId, createPublicVisualAnalyticsWidgetRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/visualanalyticswidgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createVisualAnalyticsWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling createVisualAnalyticsWidget.');
            }
            // verify required parameter 'createPublicVisualAnalyticsWidgetRequest' is not null or undefined
            if (createPublicVisualAnalyticsWidgetRequest === null || createPublicVisualAnalyticsWidgetRequest === undefined) {
                throw new Error('Required parameter createPublicVisualAnalyticsWidgetRequest was null or undefined when calling createVisualAnalyticsWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicVisualAnalyticsWidgetRequest, "CreatePublicVisualAnalyticsWidgetRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Creates a new widget group for the project, and returns the created widget group.</p><p>Once you have a widget group, you can add widgets to it.</p>
     * @summary Create a new widget group for the project
     * @param projectId The id of the project to create the widget group for
     * @param createPublicWidgetGroupRequest Request body describing the widget group under construction
     */
    createWidgetGroup(projectId, createPublicWidgetGroupRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling createWidgetGroup.');
            }
            // verify required parameter 'createPublicWidgetGroupRequest' is not null or undefined
            if (createPublicWidgetGroupRequest === null || createPublicWidgetGroupRequest === undefined) {
                throw new Error('Required parameter createPublicWidgetGroupRequest was null or undefined when calling createWidgetGroup.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(createPublicWidgetGroupRequest, "CreatePublicWidgetGroupRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicWidgetGroupDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Delete a widget from a widget group.</p>
     * @summary Delete a widget from a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group to delete
     * @param widgetId
     */
    deleteWidget(projectId, widgetGroupId, widgetId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets/{widgetId}'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)))
                .replace('{' + 'widgetId' + '}', encodeURIComponent(String(widgetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling deleteWidget.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling deleteWidget.');
            }
            // verify required parameter 'widgetId' is not null or undefined
            if (widgetId === null || widgetId === undefined) {
                throw new Error('Required parameter widgetId was null or undefined when calling deleteWidget.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Delete a widget group and all the widgets it contains.</p>
     * @summary Delete a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group to delete
     */
    deleteWidgetGroup(projectId, widgetGroupId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling deleteWidgetGroup.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling deleteWidgetGroup.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'DELETE',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns all the widget groups that are created for the project.</p><p>You need to have at least one widget group before you can add widgets to your dashboard.</p>
     * @summary Retrieve all the available widget groups for a project
     * @param projectId The id of the project
     */
    getWidgetGroups(projectId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling getWidgetGroups.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<PublicWidgetGroupDTO>");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns all the widgets from a widget group.</p>
     * @summary Retrieve all the widgets in a widget group
     * @param projectId The id of the project
     * @param widgetGroupId The id of the widget group
     */
    getWidgets(projectId, widgetGroupId, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/api/projects/{projectId}/dashboard/widgetgroups/{widgetGroupId}/widgets'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'widgetGroupId' + '}', encodeURIComponent(String(widgetGroupId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling getWidgets.');
            }
            // verify required parameter 'widgetGroupId' is not null or undefined
            if (widgetGroupId === null || widgetGroupId === undefined) {
                throw new Error('Required parameter widgetGroupId was null or undefined when calling getWidgets.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'GET',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "Array<PublicWidgetDTO>");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ProjectResourcesWidgetsApi = ProjectResourcesWidgetsApi;
