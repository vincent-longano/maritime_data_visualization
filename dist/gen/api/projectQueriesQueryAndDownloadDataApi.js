"use strict";
/**
 * xyzt.ai platform API
 * <p>Welcome to the documentation of the public API of the xyzt.ai platform. The goal of this API is to allow you to automate certain operations on the platform.</p><p>The base URL of the server is <a href=\"https://api.platform-xyzt.ai\">https://api.platform-xyzt.ai</a>. All URLs in this documentation are relative to this base URL.</p><p>You can also find some example scripts on <a href=\"https://github.com/xyzt-ai/platform-examples\">Github</a>.</p>
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@xyzt.ai
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectQueriesQueryAndDownloadDataApi = exports.ProjectQueriesQueryAndDownloadDataApiApiKeys = void 0;
const request_1 = __importDefault(require("request"));
const models_1 = require("../model/models");
const models_2 = require("../model/models");
const apis_1 = require("./apis");
let defaultBasePath = 'https://api.platform-xyzt.ai';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var ProjectQueriesQueryAndDownloadDataApiApiKeys;
(function (ProjectQueriesQueryAndDownloadDataApiApiKeys) {
})(ProjectQueriesQueryAndDownloadDataApiApiKeys = exports.ProjectQueriesQueryAndDownloadDataApiApiKeys || (exports.ProjectQueriesQueryAndDownloadDataApiApiKeys = {}));
class ProjectQueriesQueryAndDownloadDataApi {
    constructor(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this._defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            'default': new models_1.VoidAuth(),
            'jwtToken': new models_2.HttpBearerAuth(),
        };
        this.interceptors = [];
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    set useQuerystring(value) {
        this._useQuerystring = value;
    }
    set basePath(basePath) {
        this._basePath = basePath;
    }
    set defaultHeaders(defaultHeaders) {
        this._defaultHeaders = defaultHeaders;
    }
    get defaultHeaders() {
        return this._defaultHeaders;
    }
    get basePath() {
        return this._basePath;
    }
    setDefaultAuthentication(auth) {
        this.authentications.default = auth;
    }
    setApiKey(key, value) {
        this.authentications[ProjectQueriesQueryAndDownloadDataApiApiKeys[key]].apiKey = value;
    }
    set accessToken(accessToken) {
        this.authentications.jwtToken.accessToken = accessToken;
    }
    addInterceptor(interceptor) {
        this.interceptors.push(interceptor);
    }
    /**
     * Returns the asset ids matching a filter
     * @summary Download the asset ids in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadAssetIdsDataRequest Request body describing the filters
     */
    downloadAssetIdsAsCSV(projectId, dataSetId, publicDownloadAssetIdsDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/assetids'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadAssetIdsAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadAssetIdsAsCSV.');
            }
            // verify required parameter 'publicDownloadAssetIdsDataRequest' is not null or undefined
            if (publicDownloadAssetIdsDataRequest === null || publicDownloadAssetIdsDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadAssetIdsDataRequest was null or undefined when calling downloadAssetIdsAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadAssetIdsDataRequest, "PublicDownloadAssetIdsDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * Returns the asset ids matching a filter
     * @summary Download the asset ids in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadAssetIdsDataRequest Request body describing the filters
     */
    downloadAssetIdsAsJSON(projectId, dataSetId, publicDownloadAssetIdsDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/assetids'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadAssetIdsAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadAssetIdsAsJSON.');
            }
            // verify required parameter 'publicDownloadAssetIdsDataRequest' is not null or undefined
            if (publicDownloadAssetIdsDataRequest === null || publicDownloadAssetIdsDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadAssetIdsDataRequest was null or undefined when calling downloadAssetIdsAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadAssetIdsDataRequest, "PublicDownloadAssetIdsDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadAssetIdsDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the distribution diagrams in CSV format.</p>
     * @summary Download the data which is shown in the distribution diagrams in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDistributionDataRequest Request body describing the filters and distribution properties
     */
    downloadDistributionAsCSV(projectId, dataSetId, publicDownloadDistributionDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/distribution'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadDistributionAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadDistributionAsCSV.');
            }
            // verify required parameter 'publicDownloadDistributionDataRequest' is not null or undefined
            if (publicDownloadDistributionDataRequest === null || publicDownloadDistributionDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadDistributionDataRequest was null or undefined when calling downloadDistributionAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadDistributionDataRequest, "PublicDownloadDistributionDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the distribution diagrams in JSON format.</p>
     * @summary Download the data which is shown in the distribution diagrams in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDistributionDataRequest Request body describing the filters and distribution properties
     */
    downloadDistributionAsJSON(projectId, dataSetId, publicDownloadDistributionDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/distribution'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadDistributionAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadDistributionAsJSON.');
            }
            // verify required parameter 'publicDownloadDistributionDataRequest' is not null or undefined
            if (publicDownloadDistributionDataRequest === null || publicDownloadDistributionDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadDistributionDataRequest was null or undefined when calling downloadDistributionAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadDistributionDataRequest, "PublicDownloadDistributionDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadDistributionDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the dwell time analysis in CSV format.</p>
     * @summary Download the data of the dwell time analysis in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDwellTimeDataRequest Request body describing the filters and dwell time analysis properties
     */
    downloadDwellTimeAnalysisAsCSV(projectId, dataSetId, publicDownloadDwellTimeDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/dwelltimeanalysis'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
            }
            // verify required parameter 'publicDownloadDwellTimeDataRequest' is not null or undefined
            if (publicDownloadDwellTimeDataRequest === null || publicDownloadDwellTimeDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadDwellTimeDataRequest was null or undefined when calling downloadDwellTimeAnalysisAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadDwellTimeDataRequest, "PublicDownloadDwellTimeDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the dwell time analysis in JSON format.</p>
     * @summary Download the data of the dwell time analysis in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadDwellTimeDataRequest Request body describing the filters and dwell time analysis properties
     */
    downloadDwellTimeAnalysisAsJSON(projectId, dataSetId, publicDownloadDwellTimeDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/dwelltimeanalysis'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
            }
            // verify required parameter 'publicDownloadDwellTimeDataRequest' is not null or undefined
            if (publicDownloadDwellTimeDataRequest === null || publicDownloadDwellTimeDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadDwellTimeDataRequest was null or undefined when calling downloadDwellTimeAnalysisAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadDwellTimeDataRequest, "PublicDownloadDwellTimeDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadDwellTimeDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the origin destination matrix in CSV format.</p>
     * @summary Download the data which is shown in the origin destination matrix in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadOriginDestinationDataRequest Request body describing the filters and origin destination properties
     */
    downloadOriginDestinationAsCSV(projectId, dataSetId, publicDownloadOriginDestinationDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/origindestination'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadOriginDestinationAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadOriginDestinationAsCSV.');
            }
            // verify required parameter 'publicDownloadOriginDestinationDataRequest' is not null or undefined
            if (publicDownloadOriginDestinationDataRequest === null || publicDownloadOriginDestinationDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadOriginDestinationDataRequest was null or undefined when calling downloadOriginDestinationAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadOriginDestinationDataRequest, "PublicDownloadOriginDestinationDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the origin destination matrix in JSON format.</p>
     * @summary Download the data which is shown in the origin destination matrix in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadOriginDestinationDataRequest Request body describing the filters and origin destination properties
     */
    downloadOriginDestinationAsJSON(projectId, dataSetId, publicDownloadOriginDestinationDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/origindestination'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadOriginDestinationAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadOriginDestinationAsJSON.');
            }
            // verify required parameter 'publicDownloadOriginDestinationDataRequest' is not null or undefined
            if (publicDownloadOriginDestinationDataRequest === null || publicDownloadOriginDestinationDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadOriginDestinationDataRequest was null or undefined when calling downloadOriginDestinationAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadOriginDestinationDataRequest, "PublicDownloadOriginDestinationDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadOriginDestinationDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the table view shown on the visual analytics page in CSV format.</p><p>The returned CSV contains only the requested columns, and a row for each asset.</p>
     * @summary Get the data which is shown in the table on the visual analytics page in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTableDataRequest Request body describing the filters and table properties
     */
    downloadTableAsCSV(projectId, dataSetId, publicDownloadTableDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/table'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadTableAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadTableAsCSV.');
            }
            // verify required parameter 'publicDownloadTableDataRequest' is not null or undefined
            if (publicDownloadTableDataRequest === null || publicDownloadTableDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadTableDataRequest was null or undefined when calling downloadTableAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadTableDataRequest, "PublicDownloadTableDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the table view shown on the visual analytics page in JSON format.</p>
     * @summary Get the data which is shown in the table on the visual analytics page in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTableDataRequest Request body describing the filters and table properties
     */
    downloadTableAsJSON(projectId, dataSetId, publicDownloadTableDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/table'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadTableAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadTableAsJSON.');
            }
            // verify required parameter 'publicDownloadTableDataRequest' is not null or undefined
            if (publicDownloadTableDataRequest === null || publicDownloadTableDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadTableDataRequest was null or undefined when calling downloadTableAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadTableDataRequest, "PublicDownloadTableDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadTableDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the trend diagrams in CSV format.</p>
     * @summary Get the data which is shown in the trend diagrams (histograms or timelines) in CSV format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTrendDataRequest Request body describing the filters and trend properties
     */
    downloadTrendAsCSV(projectId, dataSetId, publicDownloadTrendDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/csv/trend'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['text/csv'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadTrendAsCSV.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadTrendAsCSV.');
            }
            // verify required parameter 'publicDownloadTrendDataRequest' is not null or undefined
            if (publicDownloadTrendDataRequest === null || publicDownloadTrendDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadTrendDataRequest was null or undefined when calling downloadTrendAsCSV.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadTrendDataRequest, "PublicDownloadTrendDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "string");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
    /**
     * <p>Returns the data from the trend diagrams in JSON format.</p>
     * @summary Get the data which is shown in the trend diagrams (histograms or timelines) in JSON format
     * @param projectId The id of the project
     * @param dataSetId The id of the dataSet
     * @param publicDownloadTrendDataRequest Request body describing the filters and trend properties
     */
    downloadTrendAsJSON(projectId, dataSetId, publicDownloadTrendDataRequest, options = { headers: {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            const localVarPath = this.basePath + '/public/data-query/projects/{projectId}/datasets/{dataSetId}/json/trend'
                .replace('{' + 'projectId' + '}', encodeURIComponent(String(projectId)))
                .replace('{' + 'dataSetId' + '}', encodeURIComponent(String(dataSetId)));
            let localVarQueryParameters = {};
            let localVarHeaderParams = Object.assign({}, this._defaultHeaders);
            const produces = ['application/json'];
            // give precedence to 'application/json'
            if (produces.indexOf('application/json') >= 0) {
                localVarHeaderParams.Accept = 'application/json';
            }
            else {
                localVarHeaderParams.Accept = produces.join(',');
            }
            let localVarFormParams = {};
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new Error('Required parameter projectId was null or undefined when calling downloadTrendAsJSON.');
            }
            // verify required parameter 'dataSetId' is not null or undefined
            if (dataSetId === null || dataSetId === undefined) {
                throw new Error('Required parameter dataSetId was null or undefined when calling downloadTrendAsJSON.');
            }
            // verify required parameter 'publicDownloadTrendDataRequest' is not null or undefined
            if (publicDownloadTrendDataRequest === null || publicDownloadTrendDataRequest === undefined) {
                throw new Error('Required parameter publicDownloadTrendDataRequest was null or undefined when calling downloadTrendAsJSON.');
            }
            Object.assign(localVarHeaderParams, options.headers);
            let localVarUseFormData = false;
            let localVarRequestOptions = {
                method: 'POST',
                qs: localVarQueryParameters,
                headers: localVarHeaderParams,
                uri: localVarPath,
                useQuerystring: this._useQuerystring,
                json: true,
                body: models_1.ObjectSerializer.serialize(publicDownloadTrendDataRequest, "PublicDownloadTrendDataRequest")
            };
            let authenticationPromise = Promise.resolve();
            if (this.authentications.jwtToken.accessToken) {
                authenticationPromise = authenticationPromise.then(() => this.authentications.jwtToken.applyToRequest(localVarRequestOptions));
            }
            authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));
            let interceptorPromise = authenticationPromise;
            for (const interceptor of this.interceptors) {
                interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
            }
            return interceptorPromise.then(() => {
                if (Object.keys(localVarFormParams).length) {
                    if (localVarUseFormData) {
                        localVarRequestOptions.formData = localVarFormParams;
                    }
                    else {
                        localVarRequestOptions.form = localVarFormParams;
                    }
                }
                return new Promise((resolve, reject) => {
                    (0, request_1.default)(localVarRequestOptions, (error, response, body) => {
                        if (error) {
                            reject(error);
                        }
                        else {
                            if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                                body = models_1.ObjectSerializer.deserialize(body, "PublicDownloadTrendDTO");
                                resolve({ response: response, body: body });
                            }
                            else {
                                reject(new apis_1.HttpError(response, body, response.statusCode));
                            }
                        }
                    });
                });
            });
        });
    }
}
exports.ProjectQueriesQueryAndDownloadDataApi = ProjectQueriesQueryAndDownloadDataApi;
